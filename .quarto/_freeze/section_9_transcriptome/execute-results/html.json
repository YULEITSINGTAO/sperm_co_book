{
  "hash": "e2797bf90bfa24404ec33156ddc0ec21",
  "result": {
    "markdown": "# Sperm Transcriptome Study\n\n## Raw count matrix \n\n\n::: {.cell filename='R script'}\n\n```{.r .cell-code}\n## Sperm Transcriptome Study\n\n\n## Read the clinical characteristics\nclinical_characteristics <- fread(\"D:/sperm_project/sperm_transcriptome/outcomes/important_clinical_characteristics.csv\")\nclinical_characteristics <- na.omit(clinical_characteristics)\n\nclinical_characteristics <- clinical_characteristics[order(clinical_characteristics$Patient),]\n\ninfo_table <- column_to_rownames(clinical_characteristics, var = \"Patient\") %>% \n              dplyr::filter(Group == \"A\" | Group == \"N\") %>%\n              dplyr::mutate(Group = factor(Group, levels = c(\"N\", \"A\")))\n\nfwrite(info_table,\n       \"D:/sperm_project/manuscript_09_23_2023/Tables/section_5_transcriptome/donor_info.csv\", \n       row.names = TRUE)\n\n## Read raw count matrix\nraw_count_matrix <- readRDS(\"D:/sperm_project/sperm_transcriptome/raw_count_matrix/raw_count_matrix.rds\")\n\nraw_count_matrix <- raw_count_matrix %>% dplyr::select(rownames(info_table))\n\nfwrite(raw_count_matrix,\n       \"D:/sperm_project/manuscript_09_23_2023/Tables/section_5_transcriptome/raw_count_matrix.csv\", \n       row.names = TRUE)\n\n\n## Compare the group \n\ndds <- DESeqDataSetFromMatrix(countData = raw_count_matrix,\n                              colData = info_table,\n                              design = ~ Group)\n\n## Filter gene expression\n\nsmallestGroupSize <- 5\nkeep <- rowSums(counts(dds) >= 5) >= smallestGroupSize\ndds <- dds[keep,]\n\n\n## DEG Analysis\n\ndds <- DESeq(dds)\nres <- results(dds)\n\n## Select the Key Genes\n\nlog2FC_cutoff <- 1\nadj.P_value_cutoff <- 0.05\n\n\nDEG_table <- res %>% as.data.frame() %>%\n              tibble::rownames_to_column(var = \"ensembl_gene_id\")\n\nselected_DEG_table <- res %>% as.data.frame() %>%\n#  dplyr::filter(abs(log2FoldChange) >= log2FC_cutoff, padj <= adj.P_value_cutoff) %>%\n  dplyr::add_rownames(var = \"ensembl_gene_id\") %>%\n  dplyr::mutate(ensembl_gene_id = gsub(\"\\\\..*\", \"\", ensembl_gene_id))\n\n## Define the ensembl reference \n\n\n## If human\nensembl_reference <- \"hsapiens_gene_ensembl\"\n\n## Add the annotation of gene expression table\n\nensembl = useMart(\"ensembl\")\n\nesemblist <- as.data.frame(listDatasets(ensembl))\n\nensembl = useDataset(ensembl_reference, mart=ensembl)\n\nfilters = listFilters(ensembl)\n\nattributes = listAttributes(ensembl)\n\nt2g <- getBM(attributes=c('ensembl_gene_id',\n                          \"ensembl_gene_id_version\",\n                          'chromosome_name',\n                          'start_position',\n                          'end_position', \n                          'hgnc_symbol', \n                          'band'), mart = ensembl)\n\nduplicated_ensembl <- t2g[duplicated(t2g$ensembl_gene_id), \"ensembl_gene_id\"]\n\nselected_DEG_table <- selected_DEG_table %>% filter(!ensembl_gene_id %in% duplicated_ensembl)\n\nselected_DEG_table <- left_join(selected_DEG_table, t2g, by= 'ensembl_gene_id')\n\nselected_DEG_table$arm <- str_to_title(substr(selected_DEG_table$band, 1, 1))\n\nselected_DEG_table <- selected_DEG_table %>% filter(chromosome_name %in% as.character(c(1:22, \"X\", \"Y\")))\n\nselected_DEG_table$chromosome_name <- factor(paste0(\"chr\", selected_DEG_table$chromosome_name),\n                                             levels = paste0(\"chr\", c(1:22,\"X\", \"Y\")))\n\nselected_DEG_table$arm_pos <- paste0(selected_DEG_table$chromosome_name, selected_DEG_table$arm)\n\narm_pos_levels <- outer(paste0(\"chr\",c(1:22, \"X\", \"Y\")), c(\"P\", \"Q\"), FUN = \"paste0\")\n\narm_pos_levels <- t(arm_pos_levels) \n\ndim(arm_pos_levels) <- NULL\n\nselected_DEG_table$arm_pos <- factor(selected_DEG_table$arm_pos, \n                                     levels = arm_pos_levels)\n\nfwrite(selected_DEG_table, \"D:/sperm_project/sperm_transcriptome/result_table/DEG_table/DEG_table.csv\")\n```\n:::\n\n\n## GSEA analysis \n\n\n\n::: {.cell filename='R script'}\n\n```{.r .cell-code}\nlibrary(org.Hs.eg.db)\nlibrary(clusterProfiler)\nlibrary(enrichplot)\n# we use ggplot2 to add x axis labels (ex: ridgeplot)\nlibrary(ggplot2)\n\n\nDEG_table <- fread(\"D:/sperm_project/sperm_transcriptome/result_table/DEG_table/DEG_table.csv\")\n\nDEG_table <- DEG_table[order(-DEG_table$stat),]\n\n\n# we want the log2 fold change \noriginal_gene_list <- DEG_table$log2FoldChange\n\n# name the vector\nnames(original_gene_list) <- DEG_table$ensembl_gene_id\n\n# omit any NA values \ngene_list <- na.omit(original_gene_list)\n\n# sort the list in decreasing order (required for clusterProfiler)\ngene_list = sort(gene_list, decreasing = TRUE)\n```\n:::\n\n\n\n\n\n## Discuss the expression pattern of the CO assoicated SNP genes\n\n\n::: {.cell filename='R script'}\n\n```{.r .cell-code}\nsign_SNP_df <- as.data.frame(fread(\"D:/sperm_project/manuscript_09_23_2023/Tables/section_4_CO_GWAS/CO_significant_annotated_SNP/anno_sign_SNP_df.csv\"))\n\nsign_SNP_gene_list <- unique(sign_SNP_df$Gene)\n\ndeg_table <- as.data.frame(fread(\"D:/sperm_project/sperm_transcriptome/result_table/DEG_table/DEG_table.csv\"))\n\nwhole_gene_list <- deg_table$hgnc_symbol\n\nintersect_gene_list <- intersect(sign_SNP_gene_list, whole_gene_list)\nintersect_gene_list <- intersect_gene_list[intersect_gene_list!=\"\"]\nintersect_gene_list <- c(intersect_gene_list, \"ART5\", \"ERCC6L2\", \"NAV2\", \"ZRANB3\")\n  \nintersect_gene_ensemble_list <- deg_table[deg_table$hgnc_symbol %in% intersect_gene_list, ] %>% dplyr::filter(abs(log2FoldChange) > 0.5)%>% dplyr::select(\"hgnc_symbol\", \"ensembl_gene_id_version\")\n\n\nintersect_gene_ensemble_list$ensembl_gene_id_version <- gsub(\"[.]\\\\d+\", \"\", intersect_gene_ensemble_list$ensembl_gene_id_version)\n\n# Read the raw count matrix\n\ngene_raw_count_matrix <- as.data.frame(fread(\"D:/sperm_project/sperm_transcriptome/raw_count_matrix/raw_count_matrix.csv\"))\n\nrownames(gene_raw_count_matrix) <- gene_raw_count_matrix[, 1]\n\ngene_raw_count_matrix <- gene_raw_count_matrix[, -1]  \n\nrownames(gene_raw_count_matrix) <- gsub(\"[.]\\\\d+\", \"\", rownames(gene_raw_count_matrix))\n# Define group info\n\ngroup <- c(rep(\"AS\", 7), rep(\"NF\", 6))\nnames(group) <- c(\"SCYL\", \"SLZG\", \"AWGQ\", \"AWL\", \"YMLA\", \"ALGT\", \"NZYL\", \"ALQC\", \"LCKA\", \"LZHA\", \"NDYH\", \"NYXH\", \"ALDJ\")\n\ngene_raw_count_matrix <- gene_raw_count_matrix[, names(group)]\n# Create DEGList object\n\nDEGL <- DGEList(counts=gene_raw_count_matrix, group=group[colnames(gene_raw_count_matrix)])\n\n# Calculate the cpm\n\ncpm <- cpm(DEGL, log = FALSE, normalized.lib.sizes=TRUE)\n\nfwrite(data.frame(cpm), \"D:/sperm_project/manuscript_09_23_2023/Tables/section_5_transcriptome/cpm_matrix.csv\", row.names = TRUE)\n\n# Extract the genes\n\ncpm_target_genes <- cpm[intersect_gene_ensemble_list$ensembl_gene_id_version, ]\nrownames(cpm_target_genes) <- intersect_gene_ensemble_list$hgnc_symbol\nt_cpm_target_genes <- t(cpm_target_genes)\n\nt_cpm_target_genes <- t_cpm_target_genes %>% as.data.frame() %>% dplyr::filter() %>% tibble::rownames_to_column(var = \"sample\")\n\nt_cpm_target_genes$Type <- group[t_cpm_target_genes$sample]\n\n# Melt the data frame from wide to long format\n\nmelted_t_cpm_target_genes <- melt(t_cpm_target_genes, id.vars = c(\"sample\", \"Type\"), variable.name = \"Gene\", value.name = \"Expression\")\n\n# Create a boxplot with facets\nggplot(melted_t_cpm_target_genes, aes(x = Type, y = Expression, color = Type)) +\n  geom_violin(lwd=0.8) +\n  geom_boxplot(width=0.1) +\n  facet_wrap(~ Gene, scales = \"free\", nrow = 3) +\n  labs(\n    x = \"\",\n    y = \"CPM\"\n  ) + \n  scale_color_manual(values=c(\"coral\", \"cornflowerblue\"))  +\n  theme_classic()+\n  theme(strip.text.x = element_text(\n        size = 10, color = \"black\", face = \"bold\"\n        ),\n        legend.position=\"NULL\",\n        panel.border = element_rect(\n          color = \"black\",\n          size = 0.8,\n          fill = NA\n          ),\n        text = element_text(size = 10, color = \"black\"),\n        axis.text.x = element_text(color = \"black\", size = 10, face = \"bold\"),  # X-axis text color\n        axis.text.y = element_text(color = \"black\", size = 10, face = \"bold\"),\n        axis.title.y = element_text(color = \"black\", size = 10, face = \"bold\")\n        ) + stat_compare_means(label = \"p.format\")\n\nggsave(paste0(\"D:/sperm_project/manuscript_09_23_2023/Figures/section_5_CO_GWAS/gene_expression_boxplot.pdf\"), width = 7.8, height = 4.8)  \n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}