{
  "hash": "ae9fde39fe257da02ab5b2302aa96732",
  "result": {
    "markdown": "# Data Preparation\n\n## GATK Genotyping\n\nCalling sperm genotype from fastq files were conducted by [GATK piplines](https://gatk.broadinstitute.org/hc/en-us). This code shows the work after getting the gvcf files. For the blood samples, run whole GATK population SNP calling pipeline and get the vcf file.\n\n## Extract the key features of VCF files\n\nIn order to check the correct filter for detecting the genotype, we study the distribution of vcf features. The first step to do that is use the bcftools to extract the key features of the VCF.\n\n\n\n::: {.cell filename='Bash'}\n\n```{.r .cell-code}\n#!/bin/bash -l\n\n### A robust Bash header\n#This option prevents this, by terminating the script if any command exited with a nonzero exit status.\nset -e\nset -u\nset -o pipefail\n###\n\nsperm_sample_nameList=\"../datasets/sperm_sample_namelist/sperm_sample_nameList.tsv\"\n\nfor i in {1..22}\ndo\n        echo \"Filtering chromosome${i}\"\n\n        while read vcf_file; do\n                vcf_input=\"../datasets/sperm_vcf_file/raw_vcf/chr${i}/${vcf_file}.vcf.gz\"\n                vcf_features_output=\"../datasets/sperm_vcf_file/extract_feature_raw_vcf/chr${i}/${vcf_file}.tsv\"\n                bcftools query -f '%CHROM %POS %REF %ALT [%DP %QUAL %QD %FS %SOR %MQRankSum %ReadPosRankSum]\\n' ${vcf_input} > ${vcf_features_output}\n\n        done <${sperm_sample_nameList}\n\ndone\n```\n:::\n\n\n\n## Read the sperm list\n\nWe extract the sperm sample id and make the table that notes the sperm id and donor id information.\n\n\n\n::: {.cell filename='R script'}\n\n```{.r .cell-code}\nsperm_name_list <- data.table::fread(\"../datasets/sperm_sample_namelist/sperm_sample_nameList.tsv\",\n                         header=FALSE) %>% as.data.frame()\n\ncolnames(sperm_name_list) <- \"sperm_ID\"\n\nsperm_name_list <- sperm_name_list %>% dplyr::mutate(donor_ID = gsub(\"s\\\\d+\", \"\", sperm_ID)) %>%\n                    dplyr::mutate(donor_ID = gsub(\"N\", \"NF\", donor_ID)) %>%\n                    dplyr::mutate(donor_ID = gsub(\"NFF\", \"NF\", donor_ID))\n\nfwrite(sperm_name_list, \"../datasets/sperm_sample_namelist/sperm_name_and_donor_nameList.csv\")\n\n\ndonor_name_list <- unique(sperm_name_list$donor_ID)\n```\n:::\n\n\n\n## Check the coverage of the VCF files\n\n\n\n::: {.cell filename='R script'}\n\n```{.r .cell-code}\n## For each sperm, collect the chromosome features from 1 to 22\n\ncollect_all_chr <- function(sperm_name){\n  \n  sperm_directory <- paste0(\"../datasets/sperm_vcf_file/\", c(1:22), \"/\", sperm_name, \".tsv\")\n  \n  all_chromosomes <- lapply(sperm_directory, function(i){\n  fread(i, header=FALSE)\n  })\n  \n  all_chromosomes_df <- do.call(rbind.data.frame, all_chromosomes)\n  \n  colnames(all_chromosomes_df) <- c(\"Chr\", \"Start\", \"DP\", \"QUAL\")\n  \n  all_chromosomes_df <- all_chromosomes_df %>% dplyr::mutate(End = Start) %>% \n                        mutate_at(c(\"Start\", \"End\", \"DP\", \"QUAL\"), as.numeric)\n  \n  \n  all_chromosomes_df <- all_chromosomes_df[, c(\"Chr\", \"Start\", \"End\", \"DP\", \"QUAL\")]\n  \n  \n  all_chromosomes_df <- all_chromosomes_df %>% dplyr::filter(DP != 0)\n  \n  all_chromosomes_DF_GR <- toGRanges(all_chromosomes_df)\n  \n  return(all_chromosomes_DF_GR)\n}\n\ncollect_all_sperm <- function(donor_name, sperm_name_list){\n  \n  sub_sperm_name_list <- sperm_name_list %>% dplyr::filter(donor_ID == donor_name)\n  \n  sperm_feature_list <- lapply(sub_sperm_name_list$sperm_ID, collect_all_chr)\n  \n  names(sperm_feature_list) <- sub_sperm_name_list$sperm_ID\n    \n  return(sperm_feature_list)\n                               \n}\n\n## make_SNP_density_plot \ncolor_panel <- c(\"#ddaacc\", \"#0094ff\", \"#ff9200\", \"#008d00\", \"#fb6f66\")\n\nfor (i in donor_name_list) {\n    \n    sperm_feature_list <- collect_all_sperm(i, sperm_name_list)\n    \n    pp <- getDefaultPlotParams(plot.type = 4)\n    pp$data1inmargin <- 0\n    pp$bottommargin <- 20\n    \n    pdf(paste0(\"../figures/figure_coverage_density_plot/\",\n               i, \".pdf\"), \n        width=22, \n        height=5)\n    \n    kp <- karyoploteR::plotKaryotype(genome=\"hg38\", plot.type=4, ideogram.plotter = NULL,\n                    labels.plotter = NULL, plot.params = pp,\n                    main= paste0(\"SNP Density Plot of Donor:\", i), \n                    chromosomes = paste0(\"chr\", c(1:22)))\n    \n    karyoploteR::kpAddCytobandsAsLine(kp)\n    karyoploteR::kpAddChromosomeNames(kp, srt=45)\n    \n    region_vector <- seq(0,1,length.out = length(sperm_feature_list) + 1)\n      \n    for (j in c(1:length(sperm_feature_list))) {\n      karyoploteR::kpPlotDensity(kp, sperm_feature_list[[j]], window.size = 10e4, col=color_panel[j], r0=region_vector[j],\n                    r1=region_vector[j + 1])\n      karyoploteR::kpAddLabels(kp, labels=names(sperm_feature_list)[j], data.panel = 1, r0=region_vector[j],\n                  r1=region_vector[j + 1])\n    }\n    dev.off()\n  }\n```\n:::\n\n\n\n## Check the Distribution of VCF Features\n\nIn the gvcf files, we have the key features\n\n\n\n::: {.cell filename='R script'}\n\n```{.r .cell-code}\ncollect_all_chr_features <- function(sperm_name){\n  \n  sperm_directory <- paste0(\"../datasets/sperm_vcf_file/extract_feature/chr\", c(1:22), \"/\", sperm_name, \".tsv\")\n  \n  all_chromosomes <- lapply(sperm_directory, function(i){\n  fread(i, header=FALSE)\n  })\n  \n  all_chromosomes_df <- do.call(rbind.data.frame, all_chromosomes)\n  \n  colnames(all_chromosomes_df) <- c(\"Chr\", \"Start\", \"DP\", \"QUAL\", \"QD\", \"FS\", \"SOR\", \"MQRankSum\", \"ReadPosRankSum\")\n  \n  all_chromosomes_df <- all_chromosomes_df %>% dplyr::mutate(End = Start) %>% \n                        mutate_at(c(\"Start\", \"End\", \"DP\", \"QUAL\", \"QD\", \"FS\", \"SOR\", \"MQRankSum\", \"ReadPosRankSum\"), as.numeric)\n  \n  \n  all_chromosomes_df <- all_chromosomes_df[, c(\"Chr\", \"Start\", \"End\", \"DP\", \"QUAL\", \"QD\", \"FS\", \"SOR\", \"MQRankSum\", \"ReadPosRankSum\")]\n  \n  \n  all_chromosomes_df <- all_chromosomes_df %>% dplyr::filter(DP != 0)\n  \n  return(all_chromosomes_df)\n}\n\n\ncollect_all_sperm_features <- function(donor_name, sperm_name_list){\n  \n  sub_sperm_name_list <- sperm_name_list %>% dplyr::filter(donor_ID == donor_name)\n  \n  sperm_feature_list <- lapply(sub_sperm_name_list$sperm_ID, collect_all_chr_features)\n  \n  names(sperm_feature_list) <- sub_sperm_name_list$sperm_ID\n    \n  return(sperm_feature_list)\n                               \n}\n\n\nfor (i in donor_name_list) {\n  \n  donor <- collect_all_sperm_features(i, sperm_name_list)\n  \n  donor <- dplyr::bind_rows(donor, .id = \"sperm_ID\")\n  \n  donor <- donor %>% dplyr::select(-c(Chr, Start, End))\n  \n  donor <- melt(donor, id=c(\"sperm_ID\"))\n  \n \n  \n  # Density plot in ggplot2\n  \n  ggplot(donor, aes(x = value)) + geom_density(color = 4, fill = 4, alpha = 0.25) + \n    theme_bw() + \n    theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) + \n    facet_grid(vars(sperm_ID), vars(variable), scales = \"free\")\n  \n  ggsave(paste0(\"../figures/figure_coverage_density_plot/\",\n               i, \".pdf\"), \n        width=14, \n        height=10)\n\n}\n```\n:::\n\n\n\n## Filter the vcf file\n\nBased on the raw gvcf file, we use the \"(QUAL\\>10) \\|\\| (ALT=\".\"&FMT/RGQ\\>50)\" to filter the genotypes. This procedure was conducted by bcftools.\n\n\n\n::: {.cell filename='bash script'}\n\n```{.r .cell-code}\nsperm_sample_nameList=\"../datasets/sperm_sample_namelist/sperm_sample_nameList.tsv\"\n\n        echo \"Extract VCF: QUAL_and_no_ALT\"\n\n        for i in chr{1..22}\n        do\n                echo \"chr: ${i}\"\n\n                while read vcf_file; do\n\n                        vcf_input=\"../datasets/sperm_vcf_file/raw_vcf/chr${i}/${vcf_file}.vcf.gz\"\n                        vcf_output=\"../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr${i}/${vcf_file}.vcf.gz\"\n\n                        #echo \"vcf input directory: ${vcf_input}\"\n                        #echo \"vcf output directory: ${vcf_output}\"\n\n                        bcftools view -O z -o ${vcf_output} -i '(QUAL>10) || (ALT=\".\"&FMT/RGQ>50)' ${vcf_input}\n\n                done <${sperm_sample_nameList}\n        done\n```\n:::\n",
    "supporting": [
      "section_1_data_process_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}