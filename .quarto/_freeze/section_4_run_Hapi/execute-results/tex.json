{
  "hash": "8dcf18c8218025a05ad74a8f7a72d3db",
  "result": {
    "markdown": "# Run HAPI\nSince Hapi is single chromosome based, therefore, we need to run Hapi based the input dataset from last section.\n\nThis step takes time and suggest run each donor and each chromosome in parrelle.\n\n## Run HAPI on whole dataset\n\nIn this example, we show the script for running one chromosome 1, and for other chromosomes can be calculated use the same code. \n\n\n\n::: {.cell filename='R script'}\n\n```{.r .cell-code}\n#!/usr/bin/env Rscript\nargs = commandArgs(trailingOnly=TRUE)\n\n# test if there is at least one argument: if not, return an error\nif (length(args) != 1) {\n  stop(\"Input the chromosome ID\", call.=FALSE)\n} \n\nchr_id = args[1]\n\n\n# Print input information \nprint(paste0(\"Hapi run on chromosome: \", chr_id))\n\n\n## Load the library\n\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(tibble)\nlibrary(tidyr)\nlibrary(Hapi)\nlibrary(HMM)\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(vcfR)\n\n\n## Call crossover on individuals \n\nprint(\"Chromosome:\")\nprint(chr_id)\n\nchr_level_CO_table <- c()\nHapi_input_matrix_List <- readRDS(paste0(\"~/shared/LeiYu/sperm_project/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr\", chr_id, \".rds\"))\n\n\n\n### identify crossover probabilities\nfor (error_rate_co in c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) {\n  \n  chr_level_CO_table <- c()\n  \n  cv_hmm = initHMM(States=c(\"F\",\"M\"), \n                 Symbols=c(\"f\",\"m\"), \n                 transProbs=matrix(c(0.99999, 0.00001, 0.00001, 0.99999),2),\n                 emissionProbs=matrix(c(1 - error_rate_co, error_rate_co, error_rate_co, 1 - error_rate_co),2), \n                 startProbs = c(0.5,0.5))\n  \n  for (patient in names(Hapi_input_matrix_List)) {\n    possibleError <-tryCatch(\n      {\n        sorted_hapi_input_matrix <- Hapi_input_matrix_List[[patient]]\n        position <- sorted_hapi_input_matrix$pos\n        position_order <- c(1:length(position))\n        position_df <- data.frame(pos = position, position_order = position_order)\n        Hapi_sperm_idList <- colnames(sorted_hapi_input_matrix)[5:ncol(sorted_hapi_input_matrix)]\n        hapOutput <- hapiAutoPhase(gmt = sorted_hapi_input_matrix, code = '01')\n        colnames(hapOutput) <- gsub('\\\\.', \"-\", colnames(hapOutput))\n        head(hapOutput)\n        \n        ### haplotypes\n        hap <- hapOutput[,c(\"hap1\", \"hap2\")]\n        head(hap)\n        \n        hap_position <- as.integer(rownames(hap))\n        hap_position_order <- c(1:length(hap_position))\n        hap_position_df <- data.frame(pos = hap_position, hap_position_order = hap_position_order)\n        \n        ### gametes\n        gmt <- hapOutput[, Hapi_sperm_idList]\n        head(gmt)\n\n        ### identify crossover\n        \n        for (Hapi_sperm_id in Hapi_sperm_idList) {\n          CO <- hapiIdentifyCV(hap = hap, gmt = gmt[, Hapi_sperm_id], hmm = cv_hmm)\n          if(is.null(CO)){\n            \n          }else{\n            CO <- left_join(CO, position_df, by = c(\"start\"=\"pos\"))\n            CO <- left_join(CO, position_df, by = c(\"end\"=\"pos\"))\n            CO <- left_join(CO, hap_position_df, by = c(\"start\"=\"pos\"))\n            CO <- left_join(CO, hap_position_df, by = c(\"end\"=\"pos\"))\n            \n            Hapi_sperm_id <- gsub(\"N\", \"NF\", Hapi_sperm_id)\n            Hapi_sperm_id <- gsub(\"NFF\", \"NF\", Hapi_sperm_id)\n            \n            df <- cbind(Individual = patient, sperm_id = Hapi_sperm_id, chr=chr_id, CO)\n            chr_level_CO_table <- rbind(chr_level_CO_table, df)\n          }\n        }\n        \n        },\n      error=function(e) e)\n    if(inherits(possibleError, \"error\")) next\n    }\n  \n  ## Do the outlier filter\n  outlier_filter_chr_df <- c()\n  \n  chr_i_CO <- chr_level_CO_table\n  \n  sperm_id_list <- unique(chr_i_CO$sperm_id)\n  \n  chr_i_CO$start_order_m_end_order <- NA\n  \n  chr_i_CO$end_order_m_start_order <- NA\n  \n  chr_i_CO$outlier_filter_1 <- 0\n  \n  chr_i_CO$outlier_filter_2 <- 0\n  \n  chr_i_CO$outlier_filter_1_and_2 <- 0\n  \n  chr_i_CO$color <- \"azure3\"\n  \n  for (sperm in sperm_id_list) {\n    chr_i_CO_sub <- chr_i_CO %>% filter(sperm_id == sperm)\n    \n    if(nrow(chr_i_CO_sub) < 5){\n      chr_i_CO_sub$outlier_filter_1_and_2 = 1\n      chr_i_CO_sub$color[chr_i_CO_sub$outlier_filter_1_and_2 == 1] <- \"brown3\"\n    }else{\n      \n      chr_i_CO_sub$start_order_m_end_order[2:length(chr_i_CO_sub$start_order_m_end_order)] <- chr_i_CO_sub$hap_position_order.x[2:length(chr_i_CO_sub$hap_position_order.x)] - chr_i_CO_sub$hap_position_order.y[1:length(chr_i_CO_sub$hap_position_order.x) - 1]\n      chr_i_CO_sub$end_order_m_start_order[1:length(chr_i_CO_sub$start_order_m_end_order) - 1] <- chr_i_CO_sub$hap_position_order.x[2:length(chr_i_CO_sub$hap_position_order.x)] - chr_i_CO_sub$hap_position_order.y[1:length(chr_i_CO_sub$hap_position_order.x) - 1]  \n      \n      quartiles_1 <- quantile(chr_i_CO_sub$start_order_m_end_order, probs=c(.25, .75), na.rm = TRUE)\n      quartiles_2 <- quantile(chr_i_CO_sub$end_order_m_start_order, probs=c(.25, .75), na.rm = TRUE)\n      \n      IQR_1 <- IQR(chr_i_CO_sub$start_order_m_end_order[!is.na(chr_i_CO_sub$start_order_m_end_order)])\n      IQR_2 <- IQR(chr_i_CO_sub$end_order_m_start_order[!is.na(chr_i_CO_sub$end_order_m_start_order)])\n      \n      Upper_1 <- as.numeric(quartiles_1[2]) + 1.5*IQR_1 \n      Upper_2 <- as.numeric(quartiles_2[2]) + 1.5*IQR_2 \n      \n      chr_i_CO_sub$outlier_filter_1[chr_i_CO_sub$start_order_m_end_order > Upper_1] <- 1\n      chr_i_CO_sub$outlier_filter_2[chr_i_CO_sub$end_order_m_start_order > Upper_2] <- 1\n      chr_i_CO_sub$outlier_filter_1_and_2[chr_i_CO_sub$start_order_m_end_order > Upper_1 & chr_i_CO_sub$end_order_m_start_order > Upper_2] <- 1\n      \n      chr_i_CO_sub$color[chr_i_CO_sub$outlier_filter_1_and_2 == 1] <- \"brown3\"\n      \n    }\n    outlier_filter_chr_df <- rbind(outlier_filter_chr_df, chr_i_CO_sub)\n  }\n  \n  ### Outlier filter end \n  \n  ### Quantile filter start\n  \n  chr_i_CO <- outlier_filter_chr_df\n  quantile_filter_chr_df <- c()\n  sperm_id_list <- unique(chr_i_CO$sperm_id)\n  \n  chr_i_CO$start_order_m_end_order <- NA\n  chr_i_CO$end_order_m_start_order <- NA\n  \n  chr_i_CO$single_sperm_quantile_filter_1 <- 0\n  chr_i_CO$single_sperm_quantile_filter_2 <- 0\n  chr_i_CO$single_sperm_quantile_filter_1_and_2 <- 0\n  chr_i_CO$whole_sperm_chr_quantile_filter_1 <- 0\n  chr_i_CO$whole_sperm_chr_quantile_filter_2 <- 0\n  chr_i_CO$whole_sperm_chr_quantile_filter_1_and_2 <- 0\n  \n  chr_i_CO$color <- \"azure3\"\n  \n  for (sperm in sperm_id_list) {\n    \n    chr_i_CO_sub <- chr_i_CO %>% filter(sperm_id == sperm)\n    \n    if(nrow(chr_i_CO_sub) < 5){\n      chr_i_CO_sub$quantile_filter_1_and_2 = 1\n      chr_i_CO_sub$color[chr_i_CO_sub$quantile_filter_1_and_2 == 1] <- \"brown3\"\n      }else{\n        \n        chr_i_CO_sub$start_order_m_end_order[2:length(chr_i_CO_sub$start_order_m_end_order)] <- chr_i_CO_sub$hap_position_order.x[2:length(chr_i_CO_sub$hap_position_order.x)] - chr_i_CO_sub$hap_position_order.y[1:length(chr_i_CO_sub$hap_position_order.x) - 1]\n        chr_i_CO_sub$end_order_m_start_order[1:length(chr_i_CO_sub$start_order_m_end_order) - 1] <- chr_i_CO_sub$hap_position_order.x[2:length(chr_i_CO_sub$hap_position_order.x)] - chr_i_CO_sub$hap_position_order.y[1:length(chr_i_CO_sub$hap_position_order.x) - 1]  \n        \n        single_sperm_quantiles_1 <- quantile(chr_i_CO_sub$start_order_m_end_order, probs=c(.25, .85), na.rm = TRUE)\n        single_sperm_quantiles_2 <- quantile(chr_i_CO_sub$end_order_m_start_order, probs=c(.25, .85), na.rm = TRUE)\n        \n        single_sperm_Upper_1 <- as.numeric(single_sperm_quantiles_1[2])\n        single_sperm_Upper_2 <- as.numeric(single_sperm_quantiles_2[2])\n        \n        chr_i_CO_sub$single_sperm_quantile_filter_1[chr_i_CO_sub$start_order_m_end_order > single_sperm_Upper_1] <- 1\n        chr_i_CO_sub$single_sperm_quantile_filter_2[chr_i_CO_sub$end_order_m_start_order > single_sperm_Upper_2] <- 1\n        chr_i_CO_sub$single_sperm_quantile_filter_1_and_2[chr_i_CO_sub$start_order_m_end_order > single_sperm_Upper_1 & chr_i_CO_sub$end_order_m_start_order > single_sperm_Upper_2] <- 1\n        chr_i_CO_sub$color[chr_i_CO_sub$single_sperm_quantile_filter_1_and_2 == 1] <- \"brown3\"\n        quantile_filter_chr_df <- rbind(quantile_filter_chr_df, chr_i_CO_sub)\n        }\n  }\n  \n    whole_sperm_chr_quantiles_1 <- quantile(quantile_filter_chr_df$start_order_m_end_order, probs=c(.25, .85), na.rm = TRUE)\n    whole_sperm_chr_quantiles_2 <- quantile(quantile_filter_chr_df$end_order_m_start_order, probs=c(.25, .85), na.rm = TRUE)\n    \n    whole_sperm_chr_Upper_1 <- as.numeric(whole_sperm_chr_quantiles_1[2])\n    whole_sperm_chr_Upper_2 <- as.numeric(whole_sperm_chr_quantiles_2[2])\n    \n    quantile_filter_chr_df$whole_sperm_chr_quantile_filter_1[quantile_filter_chr_df$start_order_m_end_order > whole_sperm_chr_Upper_1] <- 1\n    \n    quantile_filter_chr_df$whole_sperm_chr_quantile_filter_2[quantile_filter_chr_df$end_order_m_start_order > whole_sperm_chr_Upper_2] <- 1\n    \n    quantile_filter_chr_df$whole_sperm_chr_quantile_filter_1_and_2[quantile_filter_chr_df$start_order_m_end_order > whole_sperm_chr_Upper_1 & quantile_filter_chr_df$end_order_m_start_order > whole_sperm_chr_Upper_2] <- 1\n    \n    quantile_filter_chr_df$color[quantile_filter_chr_df$whole_sperm_chr_quantile_filter_1_and_2 == 1] <- \"brown3\"\n    \n    CV_correct_rate <- 100 - error_rate_co*100\n    \n    saveRDS(quantile_filter_chr_df, paste0(\"~/shared/LeiYu/sperm_project/CO_table/QUAL_and_RGQ_aneu_NA_removed_3/hmm_\", CV_correct_rate, \"/chr\",chr_id, \".rds\"))\n\n\n}\n```\n:::\n",
    "supporting": [
      "section_4_run_Hapi_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}