{
  "hash": "2f821fbbcfdfbcc6e8bf21498eb59320",
  "result": {
    "markdown": "# Prepare the input data for HAPI\n\nFollowed by the last Chapter, we get the filtered SNP positions and next we need to make the sperm VCF files into a R matrix for Hapi. Since genotype phasing and crossover detect only needs heterzygous loci as input, we use the blood sample to get this information then combine with the corresponding positions in sperm to get the matrix.\n\n## Prepare the aneuploidy removed sperm name list\n\n## Generate the Hpai input matrix\n\n\n\n::: {.cell filename='R script'}\n\n```{.r .cell-code}\nchr_id <- 1\n\nblood_gt_chr <- readRDS(paste0(\"../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr\", chr_id, \".rds\"))\n\nSPERM_DIRECTORY <- paste0(\"../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr\", chr_id, \"/\")\n\n\nsperm_list <- list.files(path = SPERM_DIRECTORY, pattern = \"*.vcf.gz$\", all.files = FALSE, \n                              full.names = FALSE, recursive = FALSE,\n                              ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)\n\nsperm_list_df <- gsub(\"\\\\.vcf\\\\.gz\", \"\", sperm_list)  \nsperm_list_df <- as.data.frame(sperm_list_df)\n\n#write.table(sperm_list_df, \n#            file = \"D:/sperm_project/sperm_vcf_file/sperm_sampleList/sperm_sample_nameList.tsv\", \n#            append = F, sep = \"\\t\", row.names=FALSE, col.names=FALSE, quote=FALSE)\n\n\n\n## Merge to the matrix\n\npatient_name <- gsub(\"s\\\\d\\\\.vcf\\\\.gz\", \"\", sperm_list)\npatient_name <- unique(patient_name)\n\nfor (chr_id in c(1:22)) {\n  ## Print the current working chrosome\n  \n  print(\"Chromosome:\")\n  print(chr_id)\n  \n  ## Read the blood genotype by chromosome\n  blood_gt_chr <- readRDS(paste0(\"../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr\", chr_id, \".rds\"))\n  \n  ## The Directory of filter sperm vcf file\n  Filtered_SPERM_DIRECTORY <- paste0(\"../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr\", chr_id, \"/\")\n  \n  ## Initate the Hapi Input Matirx List\n  \n  Hapi_input_matrix_List <- list()\n  \n  for (patient in patient_name) {\n    \n    patient_sperm <- sperm_list[grepl(paste0(patient, \"s\\\\d\"), sperm_list)]\n    \n    sperm_vcf_list <- list()\n    \n    for (sperm_vcf_file in patient_sperm) {\n      \n      vcf_file <- read.vcfR(paste0(Filtered_SPERM_DIRECTORY, sperm_vcf_file), verbose = FALSE)\n      vcf_file_fix_gt <- as.data.frame(extract.gt(vcf_file, as.numeric = T, IDtoRowNames = T)) %>% tibble::rownames_to_column(\"POS\")\n      \n      sperm_id <- gsub(\"\\\\.vcf\\\\.gz\", \"\", sperm_vcf_file)\n      sperm_vcf_list[[sperm_id]] <- vcf_file_fix_gt\n    }\n    \n    sperm_matrix <- sperm_vcf_list %>% reduce(full_join, by = c(\"POS\"))\n    sperm_matrix <- sperm_matrix %>% separate(POS, c('chr', 'pos'))\n    sperm_matrix <- sperm_matrix[-1]\n    sperm_matrix <- sperm_matrix %>% mutate_if(is.character, as.integer)\n    \n    ## change NF patient name\n    \n    patient<- gsub(\"N\", \"NF\", patient)\n    patient<- gsub(\"NFF\", \"NF\", patient)\n    \n    blood_patient_gt <- blood_gt_chr[ , c(\"chr\", \"pos\", \"ref\", \"alt\", patient)]\n    blood_patient_het_gt <- blood_patient_gt[str_detect(blood_patient_gt[,5], \"0/1|0\\\\|1\"), ]\n    rownames(blood_patient_het_gt) <- blood_patient_het_gt$pos\n    \n    rownames(sperm_matrix) <- sperm_matrix$pos\n    common_position <- intersect(rownames(sperm_matrix), rownames(blood_patient_het_gt))\n    \n    hapi_input_matrix <- cbind(blood_patient_het_gt[common_position, -5], sperm_matrix[common_position, -c(1)])\n    \n    sorted_hapi_input_matrix <- hapi_input_matrix[order(hapi_input_matrix$pos),]\n    \n    Hapi_input_matrix_List[[patient]] <- sorted_hapi_input_matrix\n    \n  }  \n  \n  saveRDS(Hapi_input_matrix_List, paste0(\"../datasets/Hapi_input/QUAL_and_RGQ/chr\", chr_id, \".rds\"))\n}\n```\n:::\n\n\n\n## Remove the aneuploidy sperms\n\n## Remove the aneuploidy\n\n\n\n::: {.cell filename='R script'}\n\n```{.r .cell-code}\naneuploidy_sperm_list <- c(\"AS24s5\", \"AS32s4\", \"NF25-1s1\", \"NF27-3s3\")\naneuploidy_donor_list <- c(\"AS24\", \"AS32\", \"NF25-1\", \"NF27-3\")\n\nNA_count_chr_list <- list()  \n\nfor (chr_id in c(1:22)) {\n  Hapi_input <- readRDS(paste0(\"../datasets/Hapi_input/QUAL_and_RGQ/chr\", chr_id, \".rds\"))\n  \n  for (donor in aneuploidy_donor_list) {\n    colnames(Hapi_input[[donor]]) <- gsub(\"N\", \"NF\", colnames(Hapi_input[[donor]]))\n    colnames(Hapi_input[[donor]]) <- gsub(\"NFF\", \"NF\", colnames(Hapi_input[[donor]]))\n    \n    Hapi_input[[donor]] <- Hapi_input[[donor]][,!names(Hapi_input[[donor]]) %in% aneuploidy_sperm_list]\n  }\n  \n  NA_count_chr <- c()\n  \n  for (donor in names(Hapi_input)) {\n    \n    colnames(Hapi_input[[donor]]) <- gsub(\"N\", \"NF\", colnames(Hapi_input[[donor]]))\n    colnames(Hapi_input[[donor]]) <- gsub(\"NFF\", \"NF\", colnames(Hapi_input[[donor]]))\n    \n    NA_count <- t(Hapi_input[[donor]] %>% dplyr::select(-c(chr, pos, ref, alt)) %>% summarise_all(~sum(is.na(.))))/nrow(Hapi_input[[donor]])\n    NA_count_chr <- rbind(NA_count_chr, NA_count)\n    \n  }\n  \n  saveRDS(Hapi_input, paste0(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/chr\", chr_id, \".rds\"))\n  \n  colnames(NA_count_chr) <- paste0(\"chr\", chr_id)\n  \n  NA_count_chr_list[[paste0(\"chr\", chr_id)]] <- NA_count_chr\n  \n  \n}\n\nsaveRDS(NA_count_chr_list, paste0(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/NA_count_chr_list.rds\"))\n```\n:::\n\n\n## Check the NA density\n\n\n\n::: {.cell filename='R script'}\n\n```{.r .cell-code}\nNA_count_chr_list <- readRDS(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/NA_count_chr_list.rds\")\n  \nNA_count_chr <- do.call(cbind, NA_count_chr_list)\nrownames(NA_count_chr) <- gsub(\"N\", \"NF\", rownames(NA_count_chr))\nrownames(NA_count_chr) <- gsub(\"NFF\", \"NF\", rownames(NA_count_chr))\n\nNA_count_chr <- NA_count_chr %>% as.data.frame() %>% tibble::rownames_to_column(\"sperm_id\") %>% \n  dplyr::mutate(Individual = gsub(\"s\\\\d+\", \"\", sperm_id), Type = ifelse(grepl(\"AS\", Individual), \"AS\", \"NF\"))\n\nNA_count_chr <- melt(NA_count_chr, id=c(\"sperm_id\", \"Individual\", \"Type\"))\n\nggplot(NA_count_chr, aes(x=value, color=Type)) +\n  geom_density() + theme_bw() + \n  scale_color_manual(values=c(\"coral\", \"cornflowerblue\")) + \n  facet_grid( variable ~ .)\n\nggsave(paste0(\"../figures/QUAL_and_RGQ_aneu_removed_NA_Density.pdf\"), width = 8, height = 22*3, limitsize = FALSE)\n\nNA_count_chr <- do.call(cbind, NA_count_chr_list)\nrownames(NA_count_chr) <- gsub(\"N\", \"NF\", rownames(NA_count_chr))\nrownames(NA_count_chr) <- gsub(\"NFF\", \"NF\", rownames(NA_count_chr))\nNA_count_chr <- NA_count_chr %>% as.data.frame() %>% tibble::rownames_to_column(\"sperm_id\")\n\nNA_count_chr$larger_07_count <- rowSums(NA_count_chr[, -1] > 0.7, na.rm=FALSE)\n\nremove_by_NA_sperm_list <- NA_count_chr$sperm_id[NA_count_chr$larger_07_count > 2]\n\nsaveRDS(remove_by_NA_sperm_list, \"../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/remove_by_NA_sperm_list.rds\")\n```\n:::\n\n\n\n## Regenerate the Hapi input\n\n\n\n::: {.cell filename='R script'}\n\n```{.r .cell-code}\nfor (chr_id in c(1:22)) {\n  Hapi_input <- readRDS(paste0(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/chr\", chr_id, \".rds\"))\n  \n  for (donor in names(Hapi_input)) {\n    \n    colnames(Hapi_input[[donor]]) <- gsub(\"N\", \"NF\", colnames(Hapi_input[[donor]]))\n    colnames(Hapi_input[[donor]]) <- gsub(\"NFF\", \"NF\", colnames(Hapi_input[[donor]]))\n    \n    Hapi_input[[donor]] <- Hapi_input[[donor]][,!names(Hapi_input[[donor]]) %in% remove_by_NA_sperm_list]\n    \n  }\n  saveRDS(Hapi_input, paste0(\"D:/sperm_project/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr\", chr_id, \".rds\"))\n}\n```\n:::\n\n\n\n## Count the sperm number in each individual after filter\n\n\n\n::: {.cell filename='R script'}\n\n```{.r .cell-code}\nsperms_count <- c()\n\nHapi_input <- readRDS(paste0(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr\", 1, \".rds\"))\n\nfor (donor in names(Hapi_input)) {\n  \n    sperms_count <- c(sperms_count, ncol(Hapi_input[[donor]]) - 4)\n    \n}\n\nnames(sperms_count) <- names(Hapi_input)\n\nremove_donor <- names(sperms_count[sperms_count < 3])\n\nsaveRDS(remove_donor, \"../datasets/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/remove_donor.rds\")\n\n\nfor (chr_id in c(1:22)) {\n  \n  Hapi_input <- readRDS(paste0(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr\", chr_id, \".rds\"))\n  \n  for (donor in remove_donor) {\n    \n    Hapi_input[[donor]] <- NULL\n    \n  }\n  saveRDS(Hapi_input, paste0(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr\", chr_id, \".rds\"))\n}\n```\n:::\n",
    "supporting": [
      "section_3_prepare_data_for_Hapi_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}