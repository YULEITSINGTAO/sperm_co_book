names(sperm_feature_list) <- sub_sperm_name_list$sperm_ID
return(sperm_feature_list)
}
```{r, filename = "R script", eval=F}
collect_all_chr_features <- function(sperm_name){
sperm_directory <- paste0("../datasets/sperm_vcf_file/extract_feature_raw_vcf/chr", c(1:22), "/", sperm_name, ".tsv")
all_chromosomes <- lapply(sperm_directory, function(i){
fread(i, header=FALSE)
})
all_chromosomes_df <- do.call(rbind.data.frame, all_chromosomes)
colnames(all_chromosomes_df) <- c("Chr", "Start", "DP", "QUAL", "QD", "FS", "SOR", "MQRankSum", "ReadPosRankSum")
all_chromosomes_df <- all_chromosomes_df %>% dplyr::mutate(End = Start) %>%
mutate_at(c("Start", "End", "DP", "QUAL", "QD", "FS", "SOR", "MQRankSum", "ReadPosRankSum"), as.numeric)
all_chromosomes_df <- all_chromosomes_df[, c("Chr", "Start", "End", "DP", "QUAL", "QD", "FS", "SOR", "MQRankSum", "ReadPosRankSum")]
all_chromosomes_df <- all_chromosomes_df %>% dplyr::filter(DP != 0)
return(all_chromosomes_df)
}
collect_all_sperm_features <- function(donor_name, sperm_name_list){
sub_sperm_name_list <- sperm_name_list %>% dplyr::filter(donor_ID == donor_name)
sperm_feature_list <- lapply(sub_sperm_name_list$sperm_ID, collect_all_chr_features)
names(sperm_feature_list) <- sub_sperm_name_list$sperm_ID
return(sperm_feature_list)
}
for (i in donor_name_list) {
donor <- collect_all_sperm_features(i, sperm_name_list)
donor <- dplyr::bind_rows(donor, .id = "sperm_ID")
donor <- donor %>% dplyr::select(-c(Chr, Start, End))
donor <- melt(donor, id=c("sperm_ID"))
# Density plot in ggplot2
ggplot(donor, aes(x = value)) + geom_density(color = 4, fill = 4, alpha = 0.25) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) +
facet_grid(vars(sperm_ID), vars(variable), scales = "free")
ggsave(paste0("../figures/figure_coverage_density_plot/",
i, ".pdf"),
width=14,
height=10)
}
donor
sperm_name_list <- data.table::fread("../datasets/sperm_sample_namelist/sperm_sample_nameList.tsv",
header=FALSE) %>% as.data.frame()
colnames(sperm_name_list) <- "sperm_ID"
sperm_name_list <- sperm_name_list %>% dplyr::mutate(donor_ID = gsub("s\\d+", "", sperm_ID)) %>%
dplyr::mutate(donor_ID = gsub("N", "NF", donor_ID)) %>%
dplyr::mutate(donor_ID = gsub("NFF", "NF", donor_ID))
fwrite(sperm_name_list, "../datasets/sperm_sample_namelist/sperm_name_and_donor_nameList.csv")
donor_name_list <- unique(sperm_name_list$donor_ID)
collect_all_chr <- function(sperm_name){
sperm_directory <- paste0("../datasets/sperm_vcf_file/extract_feature_raw_vcf/chr", c(1:22), "/", sperm_name, ".tsv")
all_chromosomes <- lapply(sperm_directory, function(i){
fread(i, header=FALSE)
})
all_chromosomes_df <- do.call(rbind.data.frame, all_chromosomes)
colnames(all_chromosomes_df) <- c("Chr", "Start", "DP", "QUAL")
all_chromosomes_df <- all_chromosomes_df %>% dplyr::mutate(End = Start) %>%
mutate_at(c("Start", "End", "DP", "QUAL"), as.numeric)
all_chromosomes_df <- all_chromosomes_df[, c("Chr", "Start", "End", "DP", "QUAL")]
all_chromosomes_df <- all_chromosomes_df %>% dplyr::filter(DP != 0)
all_chromosomes_DF_GR <- toGRanges(all_chromosomes_df)
return(all_chromosomes_DF_GR)
}
collect_all_sperm <- function(donor_name, sperm_name_list){
sub_sperm_name_list <- sperm_name_list %>% dplyr::filter(donor_ID == donor_name)
sperm_feature_list <- lapply(sub_sperm_name_list$sperm_ID, collect_all_chr)
names(sperm_feature_list) <- sub_sperm_name_list$sperm_ID
return(sperm_feature_list)
}
color_panel <- c("#ddaacc", "#0094ff", "#ff9200", "#008d00", "#fb6f66")
i = donor_name_list[1]
i
sperm_feature_list <- collect_all_sperm(i, sperm_name_list)
sperm_name_list
for (i in c(1:22)) {
vcf_directory <- paste0("../datasets/sperm_vcf_file/extract_vcf_feature/chr", i, "/")
filelist <- list.files(path = vcf_directory, pattern = "*.tsv$", all.files = FALSE,
full.names = TRUE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for (filename in filelist) {
new_name <- gsub("N", "NF", filename)
new_name <- gsub("NFF", "NF", new_name)
file.rename(filename, new_name)
}
}
## For each sperm, collect the chromosome features from 1 to 22
collect_all_chr <- function(sperm_name){
sperm_directory <- paste0("../datasets/sperm_vcf_file/", c(1:22), "/", sperm_name, ".tsv")
all_chromosomes <- lapply(sperm_directory, function(i){
fread(i, header=FALSE)
})
all_chromosomes_df <- do.call(rbind.data.frame, all_chromosomes)
colnames(all_chromosomes_df) <- c("Chr", "Start", "DP", "QUAL")
all_chromosomes_df <- all_chromosomes_df %>% dplyr::mutate(End = Start) %>%
mutate_at(c("Start", "End", "DP", "QUAL"), as.numeric)
all_chromosomes_df <- all_chromosomes_df[, c("Chr", "Start", "End", "DP", "QUAL")]
all_chromosomes_df <- all_chromosomes_df %>% dplyr::filter(DP != 0)
all_chromosomes_DF_GR <- toGRanges(all_chromosomes_df)
return(all_chromosomes_DF_GR)
}
collect_all_sperm <- function(donor_name, sperm_name_list){
sub_sperm_name_list <- sperm_name_list %>% dplyr::filter(donor_ID == donor_name)
sperm_feature_list <- lapply(sub_sperm_name_list$sperm_ID, collect_all_chr)
names(sperm_feature_list) <- sub_sperm_name_list$sperm_ID
return(sperm_feature_list)
}
## make_SNP_density_plot
color_panel <- c("#ddaacc", "#0094ff", "#ff9200", "#008d00", "#fb6f66")
for (i in donor_name_list) {
sperm_feature_list <- collect_all_sperm(i, sperm_name_list)
pp <- getDefaultPlotParams(plot.type = 4)
pp$data1inmargin <- 0
pp$bottommargin <- 20
pdf(paste0("../figures/figure_coverage_density_plot/",
i, ".pdf"),
width=22,
height=5)
kp <- karyoploteR::plotKaryotype(genome="hg38", plot.type=4, ideogram.plotter = NULL,
labels.plotter = NULL, plot.params = pp,
main= paste0("SNP Density Plot of Donor:", i),
chromosomes = paste0("chr", c(1:22)))
karyoploteR::kpAddCytobandsAsLine(kp)
karyoploteR::kpAddChromosomeNames(kp, srt=45)
region_vector <- seq(0,1,length.out = length(sperm_feature_list) + 1)
for (j in c(1:length(sperm_feature_list))) {
karyoploteR::kpPlotDensity(kp, sperm_feature_list[[j]], window.size = 10e4, col=color_panel[j], r0=region_vector[j],
r1=region_vector[j + 1])
karyoploteR::kpAddLabels(kp, labels=names(sperm_feature_list)[j], data.panel = 1, r0=region_vector[j],
r1=region_vector[j + 1])
}
dev.off()
}
for (i in c(1:22)) {
vcf_directory <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", i, "/")
filelist <- list.files(path = vcf_directory, pattern = "*.tsv$", all.files = FALSE,
full.names = TRUE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for (filename in filelist) {
new_name <- gsub("N", "NF", filename)
new_name <- gsub("NFF", "NF", new_name)
file.rename(filename, new_name)
}
}
vcf_directory
filelist
for (i in c(1:22)) {
vcf_directory <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", i, "/")
filelist <- list.files(path = vcf_directory, pattern = "*.vcf$", all.files = FALSE,
full.names = TRUE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for (filename in filelist) {
new_name <- gsub("N", "NF", filename)
new_name <- gsub("NFF", "NF", new_name)
file.rename(filename, new_name)
}
}
for (i in c(1:22)) {
vcf_directory <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", i, "/")
filelist <- list.files(path = vcf_directory, pattern = "*.vcf.gz$", all.files = FALSE,
full.names = TRUE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
for (filename in filelist) {
new_name <- gsub("N", "NF", filename)
new_name <- gsub("NFF", "NF", new_name)
file.rename(filename, new_name)
}
}
chr_id <- 1
blood_gt_chr <- readRDS(paste0("../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr", chr_id, ".rds"))
SPERM_DIRECTORY <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", chr_id, "/")
sperm_list <- list.files(path = SPERM_DIRECTORY, pattern = "*.vcf.gz$", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
sperm_list
sperm_list_df <- gsub("\\.vcf\\.gz", "", sperm_list)
sperm_list_df <- as.data.frame(sperm_list_df)
patient_name <- gsub("s\\d\\.vcf\\.gz", "", sperm_list)
patient_name <- unique(patient_name)
patient_name
sperm_list
sperm_list_df
chr_id <- 1
blood_gt_chr <- readRDS(paste0("../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr", chr_id, ".rds"))
SPERM_DIRECTORY <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", chr_id, "/")
sperm_list <- list.files(path = SPERM_DIRECTORY, pattern = "*.vcf.gz$", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
sperm_list_df <- gsub("\\.vcf\\.gz", "", sperm_list)
sperm_list_df <- as.data.frame(sperm_list_df)
#write.table(sperm_list_df,
#            file = "D:/sperm_project/sperm_vcf_file/sperm_sampleList/sperm_sample_nameList.tsv",
#            append = F, sep = "\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
## Merge to the matrix
patient_name <- gsub("s\\d\\.vcf\\.gz", "", sperm_list)
patient_name <- unique(patient_name)
for (chr_id in c(1:22)) {
## Print the current working chrosome
print("Chromosome:")
print(chr_id)
## Read the blood genotype by chromosome
blood_gt_chr <- readRDS(paste0("../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr", chr_id, ".rds"))
## The Directory of filter sperm vcf file
Filtered_SPERM_DIRECTORY <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", chr_id, "/")
## Initate the Hapi Input Matirx List
Hapi_input_matrix_List <- list()
for (patient in patient_name) {
patient_sperm <- sperm_list[grepl(paste0(patient, "s\\d"), sperm_list)]
sperm_vcf_list <- list()
for (sperm_vcf_file in patient_sperm) {
vcf_file <- read.vcfR(paste0(Filtered_SPERM_DIRECTORY, sperm_vcf_file), verbose = FALSE)
vcf_file_fix_gt <- as.data.frame(extract.gt(vcf_file, as.numeric = T, IDtoRowNames = T)) %>% tibble::rownames_to_column("POS")
sperm_id <- gsub("\\.vcf\\.gz", "", sperm_vcf_file)
sperm_vcf_list[[sperm_id]] <- vcf_file_fix_gt
}
sperm_matrix <- sperm_vcf_list %>% reduce(full_join, by = c("POS"))
sperm_matrix <- sperm_matrix %>% separate(POS, c('chr', 'pos'))
sperm_matrix <- sperm_matrix[-1]
sperm_matrix <- sperm_matrix %>% mutate_if(is.character, as.integer)
## change NF patient name
patient<- gsub("N", "NF", patient)
patient<- gsub("NFF", "NF", patient)
blood_patient_gt <- blood_gt_chr[ , c("chr", "pos", "ref", "alt", patient)]
blood_patient_het_gt <- blood_patient_gt[str_detect(blood_patient_gt[,5], "0/1|0\\|1"), ]
rownames(blood_patient_het_gt) <- blood_patient_het_gt$pos
rownames(sperm_matrix) <- sperm_matrix$pos
common_position <- intersect(rownames(sperm_matrix), rownames(blood_patient_het_gt))
hapi_input_matrix <- cbind(blood_patient_het_gt[common_position, -5], sperm_matrix[common_position, -c(1)])
sorted_hapi_input_matrix <- hapi_input_matrix[order(hapi_input_matrix$pos),]
Hapi_input_matrix_List[[patient]] <- sorted_hapi_input_matrix
}
saveRDS(Hapi_input_matrix_List, paste0("../datasets/Hapi_input/QUAL_and_RGQ/chr", chr_id, ".rds"))
}
library(vcfR)
chr_id <- 1
blood_gt_chr <- readRDS(paste0("../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr", chr_id, ".rds"))
SPERM_DIRECTORY <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", chr_id, "/")
sperm_list <- list.files(path = SPERM_DIRECTORY, pattern = "*.vcf.gz$", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
sperm_list_df <- gsub("\\.vcf\\.gz", "", sperm_list)
sperm_list_df <- as.data.frame(sperm_list_df)
#write.table(sperm_list_df,
#            file = "D:/sperm_project/sperm_vcf_file/sperm_sampleList/sperm_sample_nameList.tsv",
#            append = F, sep = "\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
## Merge to the matrix
patient_name <- gsub("s\\d\\.vcf\\.gz", "", sperm_list)
patient_name <- unique(patient_name)
for (chr_id in c(1:22)) {
## Print the current working chrosome
print("Chromosome:")
print(chr_id)
## Read the blood genotype by chromosome
blood_gt_chr <- readRDS(paste0("../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr", chr_id, ".rds"))
## The Directory of filter sperm vcf file
Filtered_SPERM_DIRECTORY <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", chr_id, "/")
## Initate the Hapi Input Matirx List
Hapi_input_matrix_List <- list()
for (patient in patient_name) {
patient_sperm <- sperm_list[grepl(paste0(patient, "s\\d"), sperm_list)]
sperm_vcf_list <- list()
for (sperm_vcf_file in patient_sperm) {
vcf_file <- read.vcfR(paste0(Filtered_SPERM_DIRECTORY, sperm_vcf_file), verbose = FALSE)
vcf_file_fix_gt <- as.data.frame(extract.gt(vcf_file, as.numeric = T, IDtoRowNames = T)) %>% tibble::rownames_to_column("POS")
sperm_id <- gsub("\\.vcf\\.gz", "", sperm_vcf_file)
sperm_vcf_list[[sperm_id]] <- vcf_file_fix_gt
}
sperm_matrix <- sperm_vcf_list %>% reduce(full_join, by = c("POS"))
sperm_matrix <- sperm_matrix %>% separate(POS, c('chr', 'pos'))
sperm_matrix <- sperm_matrix[-1]
sperm_matrix <- sperm_matrix %>% mutate_if(is.character, as.integer)
## change NF patient name
patient<- gsub("N", "NF", patient)
patient<- gsub("NFF", "NF", patient)
blood_patient_gt <- blood_gt_chr[ , c("chr", "pos", "ref", "alt", patient)]
blood_patient_het_gt <- blood_patient_gt[str_detect(blood_patient_gt[,5], "0/1|0\\|1"), ]
rownames(blood_patient_het_gt) <- blood_patient_het_gt$pos
rownames(sperm_matrix) <- sperm_matrix$pos
common_position <- intersect(rownames(sperm_matrix), rownames(blood_patient_het_gt))
hapi_input_matrix <- cbind(blood_patient_het_gt[common_position, -5], sperm_matrix[common_position, -c(1)])
sorted_hapi_input_matrix <- hapi_input_matrix[order(hapi_input_matrix$pos),]
Hapi_input_matrix_List[[patient]] <- sorted_hapi_input_matrix
}
saveRDS(Hapi_input_matrix_List, paste0("../datasets/Hapi_input/QUAL_and_RGQ/chr", chr_id, ".rds"))
}
library(purrr)
chr_id <- 1
blood_gt_chr <- readRDS(paste0("../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr", chr_id, ".rds"))
SPERM_DIRECTORY <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", chr_id, "/")
sperm_list <- list.files(path = SPERM_DIRECTORY, pattern = "*.vcf.gz$", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
sperm_list_df <- gsub("\\.vcf\\.gz", "", sperm_list)
sperm_list_df <- as.data.frame(sperm_list_df)
#write.table(sperm_list_df,
#            file = "D:/sperm_project/sperm_vcf_file/sperm_sampleList/sperm_sample_nameList.tsv",
#            append = F, sep = "\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
## Merge to the matrix
patient_name <- gsub("s\\d\\.vcf\\.gz", "", sperm_list)
patient_name <- unique(patient_name)
for (chr_id in c(1:22)) {
## Print the current working chrosome
print("Chromosome:")
print(chr_id)
## Read the blood genotype by chromosome
blood_gt_chr <- readRDS(paste0("../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr", chr_id, ".rds"))
## The Directory of filter sperm vcf file
Filtered_SPERM_DIRECTORY <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", chr_id, "/")
## Initate the Hapi Input Matirx List
Hapi_input_matrix_List <- list()
for (patient in patient_name) {
patient_sperm <- sperm_list[grepl(paste0(patient, "s\\d"), sperm_list)]
sperm_vcf_list <- list()
for (sperm_vcf_file in patient_sperm) {
vcf_file <- read.vcfR(paste0(Filtered_SPERM_DIRECTORY, sperm_vcf_file), verbose = FALSE)
vcf_file_fix_gt <- as.data.frame(extract.gt(vcf_file, as.numeric = T, IDtoRowNames = T)) %>% tibble::rownames_to_column("POS")
sperm_id <- gsub("\\.vcf\\.gz", "", sperm_vcf_file)
sperm_vcf_list[[sperm_id]] <- vcf_file_fix_gt
}
sperm_matrix <- sperm_vcf_list %>% reduce(full_join, by = c("POS"))
sperm_matrix <- sperm_matrix %>% separate(POS, c('chr', 'pos'))
sperm_matrix <- sperm_matrix[-1]
sperm_matrix <- sperm_matrix %>% mutate_if(is.character, as.integer)
## change NF patient name
patient<- gsub("N", "NF", patient)
patient<- gsub("NFF", "NF", patient)
blood_patient_gt <- blood_gt_chr[ , c("chr", "pos", "ref", "alt", patient)]
blood_patient_het_gt <- blood_patient_gt[str_detect(blood_patient_gt[,5], "0/1|0\\|1"), ]
rownames(blood_patient_het_gt) <- blood_patient_het_gt$pos
rownames(sperm_matrix) <- sperm_matrix$pos
common_position <- intersect(rownames(sperm_matrix), rownames(blood_patient_het_gt))
hapi_input_matrix <- cbind(blood_patient_het_gt[common_position, -5], sperm_matrix[common_position, -c(1)])
sorted_hapi_input_matrix <- hapi_input_matrix[order(hapi_input_matrix$pos),]
Hapi_input_matrix_List[[patient]] <- sorted_hapi_input_matrix
}
saveRDS(Hapi_input_matrix_List, paste0("../datasets/Hapi_input/QUAL_and_RGQ/chr", chr_id, ".rds"))
}
library(tidyr)
chr_id <- 1
blood_gt_chr <- readRDS(paste0("../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr", chr_id, ".rds"))
SPERM_DIRECTORY <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", chr_id, "/")
sperm_list <- list.files(path = SPERM_DIRECTORY, pattern = "*.vcf.gz$", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
sperm_list_df <- gsub("\\.vcf\\.gz", "", sperm_list)
sperm_list_df <- as.data.frame(sperm_list_df)
#write.table(sperm_list_df,
#            file = "D:/sperm_project/sperm_vcf_file/sperm_sampleList/sperm_sample_nameList.tsv",
#            append = F, sep = "\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
## Merge to the matrix
patient_name <- gsub("s\\d\\.vcf\\.gz", "", sperm_list)
patient_name <- unique(patient_name)
for (chr_id in c(1:22)) {
## Print the current working chrosome
print("Chromosome:")
print(chr_id)
## Read the blood genotype by chromosome
blood_gt_chr <- readRDS(paste0("../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr", chr_id, ".rds"))
## The Directory of filter sperm vcf file
Filtered_SPERM_DIRECTORY <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", chr_id, "/")
## Initate the Hapi Input Matirx List
Hapi_input_matrix_List <- list()
for (patient in patient_name) {
patient_sperm <- sperm_list[grepl(paste0(patient, "s\\d"), sperm_list)]
sperm_vcf_list <- list()
for (sperm_vcf_file in patient_sperm) {
vcf_file <- read.vcfR(paste0(Filtered_SPERM_DIRECTORY, sperm_vcf_file), verbose = FALSE)
vcf_file_fix_gt <- as.data.frame(extract.gt(vcf_file, as.numeric = T, IDtoRowNames = T)) %>% tibble::rownames_to_column("POS")
sperm_id <- gsub("\\.vcf\\.gz", "", sperm_vcf_file)
sperm_vcf_list[[sperm_id]] <- vcf_file_fix_gt
}
sperm_matrix <- sperm_vcf_list %>% reduce(full_join, by = c("POS"))
sperm_matrix <- sperm_matrix %>% separate(POS, c('chr', 'pos'))
sperm_matrix <- sperm_matrix[-1]
sperm_matrix <- sperm_matrix %>% mutate_if(is.character, as.integer)
## change NF patient name
patient<- gsub("N", "NF", patient)
patient<- gsub("NFF", "NF", patient)
blood_patient_gt <- blood_gt_chr[ , c("chr", "pos", "ref", "alt", patient)]
blood_patient_het_gt <- blood_patient_gt[str_detect(blood_patient_gt[,5], "0/1|0\\|1"), ]
rownames(blood_patient_het_gt) <- blood_patient_het_gt$pos
rownames(sperm_matrix) <- sperm_matrix$pos
common_position <- intersect(rownames(sperm_matrix), rownames(blood_patient_het_gt))
hapi_input_matrix <- cbind(blood_patient_het_gt[common_position, -5], sperm_matrix[common_position, -c(1)])
sorted_hapi_input_matrix <- hapi_input_matrix[order(hapi_input_matrix$pos),]
Hapi_input_matrix_List[[patient]] <- sorted_hapi_input_matrix
}
saveRDS(Hapi_input_matrix_List, paste0("../datasets/Hapi_input/QUAL_and_RGQ/chr", chr_id, ".rds"))
}
library(stringr)
chr_id <- 1
blood_gt_chr <- readRDS(paste0("../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr", chr_id, ".rds"))
SPERM_DIRECTORY <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", chr_id, "/")
sperm_list <- list.files(path = SPERM_DIRECTORY, pattern = "*.vcf.gz$", all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
sperm_list_df <- gsub("\\.vcf\\.gz", "", sperm_list)
sperm_list_df <- as.data.frame(sperm_list_df)
#write.table(sperm_list_df,
#            file = "D:/sperm_project/sperm_vcf_file/sperm_sampleList/sperm_sample_nameList.tsv",
#            append = F, sep = "\t", row.names=FALSE, col.names=FALSE, quote=FALSE)
## Merge to the matrix
patient_name <- gsub("s\\d\\.vcf\\.gz", "", sperm_list)
patient_name <- unique(patient_name)
for (chr_id in c(1:22)) {
## Print the current working chrosome
print("Chromosome:")
print(chr_id)
## Read the blood genotype by chromosome
blood_gt_chr <- readRDS(paste0("../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr", chr_id, ".rds"))
## The Directory of filter sperm vcf file
Filtered_SPERM_DIRECTORY <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", chr_id, "/")
## Initate the Hapi Input Matirx List
Hapi_input_matrix_List <- list()
for (patient in patient_name) {
patient_sperm <- sperm_list[grepl(paste0(patient, "s\\d"), sperm_list)]
sperm_vcf_list <- list()
for (sperm_vcf_file in patient_sperm) {
vcf_file <- read.vcfR(paste0(Filtered_SPERM_DIRECTORY, sperm_vcf_file), verbose = FALSE)
vcf_file_fix_gt <- as.data.frame(extract.gt(vcf_file, as.numeric = T, IDtoRowNames = T)) %>% tibble::rownames_to_column("POS")
sperm_id <- gsub("\\.vcf\\.gz", "", sperm_vcf_file)
sperm_vcf_list[[sperm_id]] <- vcf_file_fix_gt
}
sperm_matrix <- sperm_vcf_list %>% reduce(full_join, by = c("POS"))
sperm_matrix <- sperm_matrix %>% separate(POS, c('chr', 'pos'))
sperm_matrix <- sperm_matrix[-1]
sperm_matrix <- sperm_matrix %>% mutate_if(is.character, as.integer)
## change NF patient name
patient<- gsub("N", "NF", patient)
patient<- gsub("NFF", "NF", patient)
blood_patient_gt <- blood_gt_chr[ , c("chr", "pos", "ref", "alt", patient)]
blood_patient_het_gt <- blood_patient_gt[str_detect(blood_patient_gt[,5], "0/1|0\\|1"), ]
rownames(blood_patient_het_gt) <- blood_patient_het_gt$pos
rownames(sperm_matrix) <- sperm_matrix$pos
common_position <- intersect(rownames(sperm_matrix), rownames(blood_patient_het_gt))
hapi_input_matrix <- cbind(blood_patient_het_gt[common_position, -5], sperm_matrix[common_position, -c(1)])
sorted_hapi_input_matrix <- hapi_input_matrix[order(hapi_input_matrix$pos),]
Hapi_input_matrix_List[[patient]] <- sorted_hapi_input_matrix
}
saveRDS(Hapi_input_matrix_List, paste0("../datasets/Hapi_input/QUAL_and_RGQ/chr", chr_id, ".rds"))
}
View(blood_gt_chr)
aneuploidy_sperm_list <- c("AS24s5", "AS32s4", "NF25-1s1", "NF27-3s3")
NA_count_chr_list <- list()
for (chr_id in c(1:22)) {
Hapi_input <- readRDS(paste0("../datasets/Hapi_input/QUAL_and_RGQ/chr", chr_id, ".rds"))
for (donor in aneuploidy_donor_list) {
colnames(Hapi_input[[donor]]) <- gsub("N", "NF", colnames(Hapi_input[[donor]]))
colnames(Hapi_input[[donor]]) <- gsub("NFF", "NF", colnames(Hapi_input[[donor]]))
Hapi_input[[donor]] <- Hapi_input[[donor]][,!names(Hapi_input[[donor]]) %in% aneuploidy_sperm_list]
}
NA_count_chr <- c()
for (donor in names(Hapi_input)) {
colnames(Hapi_input[[donor]]) <- gsub("N", "NF", colnames(Hapi_input[[donor]]))
colnames(Hapi_input[[donor]]) <- gsub("NFF", "NF", colnames(Hapi_input[[donor]]))
NA_count <- t(Hapi_input[[donor]] %>% dplyr::select(-c(chr, pos, ref, alt)) %>% summarise_all(~sum(is.na(.))))/nrow(Hapi_input[[donor]])
NA_count_chr <- rbind(NA_count_chr, NA_count)
}
saveRDS(Hapi_input, paste0("../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/chr", chr_id, ".rds"))
colnames(NA_count_chr) <- paste0("chr", chr_id)
NA_count_chr_list[[paste0("chr", chr_id)]] <- NA_count_chr
}
aneuploidy_sperm_list <- c("AS24s5", "AS32s4", "NF25-1s1", "NF27-3s3")
aneuploidy_donor_list <- c("AS24", "AS32", "NF25-1", "NF27-3")
NA_count_chr_list <- list()
for (chr_id in c(1:22)) {
Hapi_input <- readRDS(paste0("../datasets/Hapi_input/QUAL_and_RGQ/chr", chr_id, ".rds"))
for (donor in aneuploidy_donor_list) {
colnames(Hapi_input[[donor]]) <- gsub("N", "NF", colnames(Hapi_input[[donor]]))
colnames(Hapi_input[[donor]]) <- gsub("NFF", "NF", colnames(Hapi_input[[donor]]))
Hapi_input[[donor]] <- Hapi_input[[donor]][,!names(Hapi_input[[donor]]) %in% aneuploidy_sperm_list]
}
NA_count_chr <- c()
for (donor in names(Hapi_input)) {
colnames(Hapi_input[[donor]]) <- gsub("N", "NF", colnames(Hapi_input[[donor]]))
colnames(Hapi_input[[donor]]) <- gsub("NFF", "NF", colnames(Hapi_input[[donor]]))
NA_count <- t(Hapi_input[[donor]] %>% dplyr::select(-c(chr, pos, ref, alt)) %>% summarise_all(~sum(is.na(.))))/nrow(Hapi_input[[donor]])
NA_count_chr <- rbind(NA_count_chr, NA_count)
}
saveRDS(Hapi_input, paste0("../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/chr", chr_id, ".rds"))
colnames(NA_count_chr) <- paste0("chr", chr_id)
NA_count_chr_list[[paste0("chr", chr_id)]] <- NA_count_chr
}
saveRDS(NA_count_chr_list, paste0("../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/NA_count_chr_list.rds"))
View(Hapi_input)
NA_count_chr_list <- readRDS("../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/NA_count_chr_list.rds")
NA_count_chr <- do.call(cbind, NA_count_chr_list)
rownames(NA_count_chr) <- gsub("N", "NF", rownames(NA_count_chr))
rownames(NA_count_chr) <- gsub("NFF", "NF", rownames(NA_count_chr))
NA_count_chr <- NA_count_chr %>% as.data.frame() %>% tibble::rownames_to_column("sperm_id") %>%
dplyr::mutate(Individual = gsub("s\\d+", "", sperm_id), Type = ifelse(grepl("AS", Individual), "AS", "NF"))
NA_count_chr
NA_count_chr <- melt(NA_count_chr, id=c("sperm_id", "Individual", "Type"))
ggplot(NA_count_chr, aes(x=value, color=Type)) +
geom_density() + theme_bw() +
scale_color_manual(values=c("coral", "cornflowerblue")) +
facet_grid( variable ~ .)
library(ggplot2)
ggplot(NA_count_chr, aes(x=value, color=Type)) +
geom_density() + theme_bw() +
scale_color_manual(values=c("coral", "cornflowerblue")) +
facet_grid( variable ~ .)
NA_count_chr <- do.call(cbind, NA_count_chr_list)
rownames(NA_count_chr) <- gsub("N", "NF", rownames(NA_count_chr))
rownames(NA_count_chr) <- gsub("NFF", "NF", rownames(NA_count_chr))
NA_count_chr <- NA_count_chr %>% as.data.frame() %>% tibble::rownames_to_column("sperm_id")
NA_count_chr$larger_07_count <- rowSums(NA_count_chr[, -1] > 0.7, na.rm=FALSE)
NA_count_chr
remove_by_NA_sperm_list <- NA_count_chr$sperm_id[NA_count_chr$larger_07_count > 2]
remove_by_NA_sperm_list
for (chr_id in c(1:22)) {
Hapi_input <- readRDS(paste0("../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/chr", chr_id, ".rds"))
for (donor in names(Hapi_input)) {
colnames(Hapi_input[[donor]]) <- gsub("N", "NF", colnames(Hapi_input[[donor]]))
colnames(Hapi_input[[donor]]) <- gsub("NFF", "NF", colnames(Hapi_input[[donor]]))
Hapi_input[[donor]] <- Hapi_input[[donor]][,!names(Hapi_input[[donor]]) %in% remove_by_NA_sperm_list]
}
saveRDS(Hapi_input, paste0("D:/sperm_project/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr", chr_id, ".rds"))
}
