# Prepare the input data for HAPI

Followed by the last Chapter, we get the filtered SNP positions and next we need to make the sperm VCF files into a R matrix for Hapi. Since genotype phasing and crossover detect only needs heterzygous loci as input, we use the blood sample to get this information then combine with the corresponding positions in sperm to get the matrix.

## Prepare the aneuploidy removed sperm name list

## Generate the Hpai input matrix

```{r, filename = "R script", eval = FALSE}

chr_id <- 1

blood_gt_chr <- readRDS(paste0("../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr", chr_id, ".rds"))

SPERM_DIRECTORY <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", chr_id, "/")


sperm_list <- list.files(path = SPERM_DIRECTORY, pattern = "*.vcf.gz$", all.files = FALSE, 
                              full.names = FALSE, recursive = FALSE,
                              ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)

sperm_list_df <- gsub("\\.vcf\\.gz", "", sperm_list)  
sperm_list_df <- as.data.frame(sperm_list_df)

#write.table(sperm_list_df, 
#            file = "D:/sperm_project/sperm_vcf_file/sperm_sampleList/sperm_sample_nameList.tsv", 
#            append = F, sep = "\t", row.names=FALSE, col.names=FALSE, quote=FALSE)



## Merge to the matrix

patient_name <- gsub("s\\d\\.vcf\\.gz", "", sperm_list)
patient_name <- unique(patient_name)

for (chr_id in c(1:22)) {
  ## Print the current working chrosome
  
  print("Chromosome:")
  print(chr_id)
  
  ## Read the blood genotype by chromosome
  blood_gt_chr <- readRDS(paste0("../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr", chr_id, ".rds"))
  
  ## The Directory of filter sperm vcf file
  Filtered_SPERM_DIRECTORY <- paste0("../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr", chr_id, "/")
  
  ## Initate the Hapi Input Matirx List
  
  Hapi_input_matrix_List <- list()
  
  for (patient in patient_name) {
    
    patient_sperm <- sperm_list[grepl(paste0(patient, "s\\d"), sperm_list)]
    
    sperm_vcf_list <- list()
    
    for (sperm_vcf_file in patient_sperm) {
      
      vcf_file <- read.vcfR(paste0(Filtered_SPERM_DIRECTORY, sperm_vcf_file), verbose = FALSE)
      vcf_file_fix_gt <- as.data.frame(extract.gt(vcf_file, as.numeric = T, IDtoRowNames = T)) %>% tibble::rownames_to_column("POS")
      
      sperm_id <- gsub("\\.vcf\\.gz", "", sperm_vcf_file)
      sperm_vcf_list[[sperm_id]] <- vcf_file_fix_gt
    }
    
    sperm_matrix <- sperm_vcf_list %>% reduce(full_join, by = c("POS"))
    sperm_matrix <- sperm_matrix %>% separate(POS, c('chr', 'pos'))
    sperm_matrix <- sperm_matrix[-1]
    sperm_matrix <- sperm_matrix %>% mutate_if(is.character, as.integer)
    
    ## change NF patient name
    
    patient<- gsub("N", "NF", patient)
    patient<- gsub("NFF", "NF", patient)
    
    blood_patient_gt <- blood_gt_chr[ , c("chr", "pos", "ref", "alt", patient)]
    blood_patient_het_gt <- blood_patient_gt[str_detect(blood_patient_gt[,5], "0/1|0\\|1"), ]
    rownames(blood_patient_het_gt) <- blood_patient_het_gt$pos
    
    rownames(sperm_matrix) <- sperm_matrix$pos
    common_position <- intersect(rownames(sperm_matrix), rownames(blood_patient_het_gt))
    
    hapi_input_matrix <- cbind(blood_patient_het_gt[common_position, -5], sperm_matrix[common_position, -c(1)])
    
    sorted_hapi_input_matrix <- hapi_input_matrix[order(hapi_input_matrix$pos),]
    
    Hapi_input_matrix_List[[patient]] <- sorted_hapi_input_matrix
    
  }  
  
  saveRDS(Hapi_input_matrix_List, paste0("../datasets/Hapi_input/QUAL_and_RGQ/chr", chr_id, ".rds"))
}

```

## Remove the aneuploidy sperms

## Remove the aneuploidy

```{r, filename = "R script", eval = FALSE}

aneuploidy_sperm_list <- c("AS24s5", "AS32s4", "NF25-1s1", "NF27-3s3")
aneuploidy_donor_list <- c("AS24", "AS32", "NF25-1", "NF27-3")

NA_count_chr_list <- list()  

for (chr_id in c(1:22)) {
  Hapi_input <- readRDS(paste0("../datasets/Hapi_input/QUAL_and_RGQ/chr", chr_id, ".rds"))
  
  for (donor in aneuploidy_donor_list) {
    colnames(Hapi_input[[donor]]) <- gsub("N", "NF", colnames(Hapi_input[[donor]]))
    colnames(Hapi_input[[donor]]) <- gsub("NFF", "NF", colnames(Hapi_input[[donor]]))
    
    Hapi_input[[donor]] <- Hapi_input[[donor]][,!names(Hapi_input[[donor]]) %in% aneuploidy_sperm_list]
  }
  
  NA_count_chr <- c()
  
  for (donor in names(Hapi_input)) {
    
    colnames(Hapi_input[[donor]]) <- gsub("N", "NF", colnames(Hapi_input[[donor]]))
    colnames(Hapi_input[[donor]]) <- gsub("NFF", "NF", colnames(Hapi_input[[donor]]))
    
    NA_count <- t(Hapi_input[[donor]] %>% dplyr::select(-c(chr, pos, ref, alt)) %>% summarise_all(~sum(is.na(.))))/nrow(Hapi_input[[donor]])
    NA_count_chr <- rbind(NA_count_chr, NA_count)
    
  }
  
  saveRDS(Hapi_input, paste0("../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/chr", chr_id, ".rds"))
  
  colnames(NA_count_chr) <- paste0("chr", chr_id)
  
  NA_count_chr_list[[paste0("chr", chr_id)]] <- NA_count_chr
  
  
}

saveRDS(NA_count_chr_list, paste0("../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/NA_count_chr_list.rds"))
```
## Check the NA density

```{r, filename = "R script", eval = FALSE}
NA_count_chr_list <- readRDS("../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/NA_count_chr_list.rds")
  
NA_count_chr <- do.call(cbind, NA_count_chr_list)
rownames(NA_count_chr) <- gsub("N", "NF", rownames(NA_count_chr))
rownames(NA_count_chr) <- gsub("NFF", "NF", rownames(NA_count_chr))

NA_count_chr <- NA_count_chr %>% as.data.frame() %>% tibble::rownames_to_column("sperm_id") %>% 
  dplyr::mutate(Individual = gsub("s\\d+", "", sperm_id), Type = ifelse(grepl("AS", Individual), "AS", "NF"))

NA_count_chr <- melt(NA_count_chr, id=c("sperm_id", "Individual", "Type"))

ggplot(NA_count_chr, aes(x=value, color=Type)) +
  geom_density() + theme_bw() + 
  scale_color_manual(values=c("coral", "cornflowerblue")) + 
  facet_grid( variable ~ .)

ggsave(paste0("../figures/QUAL_and_RGQ_aneu_removed_NA_Density.pdf"), width = 8, height = 22*3, limitsize = FALSE)

NA_count_chr <- do.call(cbind, NA_count_chr_list)
rownames(NA_count_chr) <- gsub("N", "NF", rownames(NA_count_chr))
rownames(NA_count_chr) <- gsub("NFF", "NF", rownames(NA_count_chr))
NA_count_chr <- NA_count_chr %>% as.data.frame() %>% tibble::rownames_to_column("sperm_id")

NA_count_chr$larger_07_count <- rowSums(NA_count_chr[, -1] > 0.7, na.rm=FALSE)

remove_by_NA_sperm_list <- NA_count_chr$sperm_id[NA_count_chr$larger_07_count > 2]

saveRDS(remove_by_NA_sperm_list, "../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/remove_by_NA_sperm_list.rds")
```

## Regenerate the Hapi input

```{r, filename = "R script", eval = FALSE}

for (chr_id in c(1:22)) {
  Hapi_input <- readRDS(paste0("../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/chr", chr_id, ".rds"))
  
  for (donor in names(Hapi_input)) {
    
    colnames(Hapi_input[[donor]]) <- gsub("N", "NF", colnames(Hapi_input[[donor]]))
    colnames(Hapi_input[[donor]]) <- gsub("NFF", "NF", colnames(Hapi_input[[donor]]))
    
    Hapi_input[[donor]] <- Hapi_input[[donor]][,!names(Hapi_input[[donor]]) %in% remove_by_NA_sperm_list]
    
  }
  saveRDS(Hapi_input, paste0("D:/sperm_project/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr", chr_id, ".rds"))
}

```

## Count the sperm number in each individual after filter

```{r, filename = "R script", eval = FALSE}
sperms_count <- c()

Hapi_input <- readRDS(paste0("../datasets/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr", 1, ".rds"))

for (donor in names(Hapi_input)) {
  
    sperms_count <- c(sperms_count, ncol(Hapi_input[[donor]]) - 4)
    
}

names(sperms_count) <- names(Hapi_input)

remove_donor <- names(sperms_count[sperms_count < 3])

saveRDS(remove_donor, "../datasets/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/remove_donor.rds")


for (chr_id in c(1:22)) {
  
  Hapi_input <- readRDS(paste0("../datasets/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr", chr_id, ".rds"))
  
  for (donor in remove_donor) {
    
    Hapi_input[[donor]] <- NULL
    
  }
  saveRDS(Hapi_input, paste0("../datasets/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr", chr_id, ".rds"))
}
  
```

