[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reduced Meiotic Crossing Over Linked to Impaired Sperm Motility",
    "section": "",
    "text": "1 Introduction\nThis is a R document for the project Reduced Meiotic Crossing Over Linked to Impaired Sperm Motility.\n\n\n2 Abstract\nIn addition to reproductive organ anomalies, oligozoospermia, and azoospermia, asthenospermia emerges as a prevailing contributor to male infertility. While lifestyle adjustments and medical interventions hold potential to alleviate asthenospermia, its underlying mechanism remains elusive. Employing single-cell sequencing, we analyzed meiotic recombination in individual sperm cells from 30 males, comprising 11 with asthenospermia (AS) and 19 with normal fertility (NF). Our study unveiled the distribution of recombination events and identified recombination hotspots in male gametes. Recombination frequency declined with age in both NF and AS groups and correlated with key sperm movement characteristics such as total motility. The AS group exhibited not only a reduced recombination rate but also an elevated propensity to produce sperm with aneuploidy compared to the NF group. A genome-wide association study revealed novel genomic loci and closely positioned genes intricately associated with DNA crossover formation. These genes display an enrichment of energy metabolism and DNA-related activities, central to meiosis and gamete production. Our results suggest that an energy transformation deficiency within spermatogonia could potentially lead to reduced DNA recombination during meiosis, along with impaired sperm motility – both hallmarks of males afflicted by asthenospermia.\nKeywords: asthenospermia; DNA recombination; genome-wide association study; meiosis; single sperm cell sequencing\n\n\n\nWorkflow for Comprehensive Analysis of Sperm Motility Characteristics and Recombination. In this study, we outline the comprehensive analysis workflow for assessing sperm motility characteristics and recombination. (A) Genome Profile Phase. During the genome profile phase, we collected blood samples and 4-5 sperm samples from asthenospermia donors (n = 19) and normal donors (n = 11). Bulk sequencing of blood samples was conducted at an approximate depth of 10x, while single-cell sequencing was performed on sperm cells at a depth of 1x. For each donor, fastq files from bulk blood sequencing and 4-5 sperm single-cell fastq files were generated as part of the genome profiling phase. (B) Individual-Level Crossover Detection Phase. During the individual-level crossover detection phase, the Genome Analysis Toolkit (GATK) genotyping pipeline was employed to obtain the genotypes of both blood and sperm samples for each donor. Heterogeneous loci positions were extracted from the blood genotype profile and subsequently utilized as a reference for HAPI, enabling the identification of crossover events in each sperm sample. By the conclusion of this phase, both the blood genotype profile and the crossover event profiles for each sperm sample were generated. (C) Transcriptome Profiling Phase. In this phase, a second cohort consisting of sperm samples from asthenospermia donors (n = 7) and normal donors (n = 6) was collected. RNA-sequencing (RNA-seq) was performed to obtain the gene expression profiles of these samples. (D) Downstream Statistics Analysis Phase. In this phase, several key analyses were carried out, including crossover hotspot analysis, a comparison of crossovers between asthenospermia and normal sperm, an investigation into crossover frequency-associated loci, and a comparison study of critical genes.\n\n\n\n\n3 Needed Packages\nLoad the needed packages. Below are the packages need in this documents.\n\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(karyoploteR)\nlibrary(tibble)\nlibrary(tidyr)\nlibrary(Hapi)\nlibrary(HMM)\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(vcfR)\nlibrary(DESeq2)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(biomaRt)\nlibrary(stringr)\nlibrary(tidyverse)\nlibrary(reshape2)\nlibrary(ggpubr)\nlibrary(ggExtra)\nlibrary(ggbeeswarm)\nlibrary(GGally)\nlibrary(regioneR)\nlibrary(CopyNumberPlots)\nlibrary(ggpmisc)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "section_1_data_process.html#gatk-genotyping",
    "href": "section_1_data_process.html#gatk-genotyping",
    "title": "2  Data Preparation",
    "section": "2.1 GATK Genotyping",
    "text": "2.1 GATK Genotyping\nCalling sperm genotype from fastq files were conducted by GATK piplines. This code shows the work after getting the gvcf files. For the blood samples, run whole GATK population SNP calling pipeline and get the vcf file."
  },
  {
    "objectID": "section_1_data_process.html#extract-the-key-features-of-vcf-files",
    "href": "section_1_data_process.html#extract-the-key-features-of-vcf-files",
    "title": "2  Data Preparation",
    "section": "2.2 Extract the key features of VCF files",
    "text": "2.2 Extract the key features of VCF files\nIn order to check the correct filter for detecting the genotype, we study the distribution of vcf features. The first step to do that is use the bcftools to extract the key features of the VCF.\n\n\n\nBash\n\n#!/bin/bash -l\n\n### A robust Bash header\n#This option prevents this, by terminating the script if any command exited with a nonzero exit status.\nset -e\nset -u\nset -o pipefail\n###\n\nsperm_sample_nameList=\"../datasets/sperm_sample_namelist/sperm_sample_nameList.tsv\"\n\nfor i in {1..22}\ndo\n        echo \"Filtering chromosome${i}\"\n\n        while read vcf_file; do\n                vcf_input=\"../datasets/sperm_vcf_file/raw_vcf/chr${i}/${vcf_file}.vcf.gz\"\n                vcf_features_output=\"../datasets/sperm_vcf_file/extract_feature_raw_vcf/chr${i}/${vcf_file}.tsv\"\n                bcftools query -f '%CHROM %POS %REF %ALT [%DP %QUAL %QD %FS %SOR %MQRankSum %ReadPosRankSum]\\n' ${vcf_input} &gt; ${vcf_features_output}\n\n        done &lt;${sperm_sample_nameList}\n\ndone"
  },
  {
    "objectID": "section_1_data_process.html#read-the-sperm-list",
    "href": "section_1_data_process.html#read-the-sperm-list",
    "title": "2  Data Preparation",
    "section": "2.3 Read the sperm list",
    "text": "2.3 Read the sperm list\nWe extract the sperm sample id and make the table that notes the sperm id and donor id information.\n\n\n\nR script\n\nsperm_name_list &lt;- data.table::fread(\"../datasets/sperm_sample_namelist/sperm_sample_nameList.tsv\",\n                         header=FALSE) %&gt;% as.data.frame()\n\ncolnames(sperm_name_list) &lt;- \"sperm_ID\"\n\nsperm_name_list &lt;- sperm_name_list %&gt;% dplyr::mutate(donor_ID = gsub(\"s\\\\d+\", \"\", sperm_ID)) %&gt;%\n                    dplyr::mutate(donor_ID = gsub(\"N\", \"NF\", donor_ID)) %&gt;%\n                    dplyr::mutate(donor_ID = gsub(\"NFF\", \"NF\", donor_ID))\n\nfwrite(sperm_name_list, \"../datasets/sperm_sample_namelist/sperm_name_and_donor_nameList.csv\")\n\n\ndonor_name_list &lt;- unique(sperm_name_list$donor_ID)"
  },
  {
    "objectID": "section_1_data_process.html#check-the-coverage-of-the-vcf-files",
    "href": "section_1_data_process.html#check-the-coverage-of-the-vcf-files",
    "title": "2  Data Preparation",
    "section": "2.4 Check the coverage of the VCF files",
    "text": "2.4 Check the coverage of the VCF files\n\n\n\nR script\n\n## For each sperm, collect the chromosome features from 1 to 22\n\ncollect_all_chr &lt;- function(sperm_name){\n  \n  sperm_directory &lt;- paste0(\"../datasets/sperm_vcf_file/\", c(1:22), \"/\", sperm_name, \".tsv\")\n  \n  all_chromosomes &lt;- lapply(sperm_directory, function(i){\n  fread(i, header=FALSE)\n  })\n  \n  all_chromosomes_df &lt;- do.call(rbind.data.frame, all_chromosomes)\n  \n  colnames(all_chromosomes_df) &lt;- c(\"Chr\", \"Start\", \"DP\", \"QUAL\")\n  \n  all_chromosomes_df &lt;- all_chromosomes_df %&gt;% dplyr::mutate(End = Start) %&gt;% \n                        mutate_at(c(\"Start\", \"End\", \"DP\", \"QUAL\"), as.numeric)\n  \n  \n  all_chromosomes_df &lt;- all_chromosomes_df[, c(\"Chr\", \"Start\", \"End\", \"DP\", \"QUAL\")]\n  \n  \n  all_chromosomes_df &lt;- all_chromosomes_df %&gt;% dplyr::filter(DP != 0)\n  \n  all_chromosomes_DF_GR &lt;- toGRanges(all_chromosomes_df)\n  \n  return(all_chromosomes_DF_GR)\n}\n\ncollect_all_sperm &lt;- function(donor_name, sperm_name_list){\n  \n  sub_sperm_name_list &lt;- sperm_name_list %&gt;% dplyr::filter(donor_ID == donor_name)\n  \n  sperm_feature_list &lt;- lapply(sub_sperm_name_list$sperm_ID, collect_all_chr)\n  \n  names(sperm_feature_list) &lt;- sub_sperm_name_list$sperm_ID\n    \n  return(sperm_feature_list)\n                               \n}\n\n## make_SNP_density_plot \ncolor_panel &lt;- c(\"#ddaacc\", \"#0094ff\", \"#ff9200\", \"#008d00\", \"#fb6f66\")\n\nfor (i in donor_name_list) {\n    \n    sperm_feature_list &lt;- collect_all_sperm(i, sperm_name_list)\n    \n    pp &lt;- getDefaultPlotParams(plot.type = 4)\n    pp$data1inmargin &lt;- 0\n    pp$bottommargin &lt;- 20\n    \n    pdf(paste0(\"../figures/figure_coverage_density_plot/\",\n               i, \".pdf\"), \n        width=22, \n        height=5)\n    \n    kp &lt;- karyoploteR::plotKaryotype(genome=\"hg38\", plot.type=4, ideogram.plotter = NULL,\n                    labels.plotter = NULL, plot.params = pp,\n                    main= paste0(\"SNP Density Plot of Donor:\", i), \n                    chromosomes = paste0(\"chr\", c(1:22)))\n    \n    karyoploteR::kpAddCytobandsAsLine(kp)\n    karyoploteR::kpAddChromosomeNames(kp, srt=45)\n    \n    region_vector &lt;- seq(0,1,length.out = length(sperm_feature_list) + 1)\n      \n    for (j in c(1:length(sperm_feature_list))) {\n      karyoploteR::kpPlotDensity(kp, sperm_feature_list[[j]], window.size = 10e4, col=color_panel[j], r0=region_vector[j],\n                    r1=region_vector[j + 1])\n      karyoploteR::kpAddLabels(kp, labels=names(sperm_feature_list)[j], data.panel = 1, r0=region_vector[j],\n                  r1=region_vector[j + 1])\n    }\n    dev.off()\n  }"
  },
  {
    "objectID": "section_1_data_process.html#check-the-distribution-of-vcf-features",
    "href": "section_1_data_process.html#check-the-distribution-of-vcf-features",
    "title": "2  Data Preparation",
    "section": "2.5 Check the Distribution of VCF Features",
    "text": "2.5 Check the Distribution of VCF Features\nIn the gvcf files, we have the key features\n\n\n\nR script\n\ncollect_all_chr_features &lt;- function(sperm_name){\n  \n  sperm_directory &lt;- paste0(\"../datasets/sperm_vcf_file/extract_feature/chr\", c(1:22), \"/\", sperm_name, \".tsv\")\n  \n  all_chromosomes &lt;- lapply(sperm_directory, function(i){\n  fread(i, header=FALSE)\n  })\n  \n  all_chromosomes_df &lt;- do.call(rbind.data.frame, all_chromosomes)\n  \n  colnames(all_chromosomes_df) &lt;- c(\"Chr\", \"Start\", \"DP\", \"QUAL\", \"QD\", \"FS\", \"SOR\", \"MQRankSum\", \"ReadPosRankSum\")\n  \n  all_chromosomes_df &lt;- all_chromosomes_df %&gt;% dplyr::mutate(End = Start) %&gt;% \n                        mutate_at(c(\"Start\", \"End\", \"DP\", \"QUAL\", \"QD\", \"FS\", \"SOR\", \"MQRankSum\", \"ReadPosRankSum\"), as.numeric)\n  \n  \n  all_chromosomes_df &lt;- all_chromosomes_df[, c(\"Chr\", \"Start\", \"End\", \"DP\", \"QUAL\", \"QD\", \"FS\", \"SOR\", \"MQRankSum\", \"ReadPosRankSum\")]\n  \n  \n  all_chromosomes_df &lt;- all_chromosomes_df %&gt;% dplyr::filter(DP != 0)\n  \n  return(all_chromosomes_df)\n}\n\n\ncollect_all_sperm_features &lt;- function(donor_name, sperm_name_list){\n  \n  sub_sperm_name_list &lt;- sperm_name_list %&gt;% dplyr::filter(donor_ID == donor_name)\n  \n  sperm_feature_list &lt;- lapply(sub_sperm_name_list$sperm_ID, collect_all_chr_features)\n  \n  names(sperm_feature_list) &lt;- sub_sperm_name_list$sperm_ID\n    \n  return(sperm_feature_list)\n                               \n}\n\n\nfor (i in donor_name_list) {\n  \n  donor &lt;- collect_all_sperm_features(i, sperm_name_list)\n  \n  donor &lt;- dplyr::bind_rows(donor, .id = \"sperm_ID\")\n  \n  donor &lt;- donor %&gt;% dplyr::select(-c(Chr, Start, End))\n  \n  donor &lt;- melt(donor, id=c(\"sperm_ID\"))\n  \n \n  \n  # Density plot in ggplot2\n  \n  ggplot(donor, aes(x = value)) + geom_density(color = 4, fill = 4, alpha = 0.25) + \n    theme_bw() + \n    theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) + \n    facet_grid(vars(sperm_ID), vars(variable), scales = \"free\")\n  \n  ggsave(paste0(\"../figures/figure_coverage_density_plot/\",\n               i, \".pdf\"), \n        width=14, \n        height=10)\n\n}"
  },
  {
    "objectID": "section_1_data_process.html#filter-the-vcf-file",
    "href": "section_1_data_process.html#filter-the-vcf-file",
    "title": "2  Data Preparation",
    "section": "2.6 Filter the vcf file",
    "text": "2.6 Filter the vcf file\nBased on the raw gvcf file, we use the “(QUAL&gt;10) || (ALT=”.”&FMT/RGQ&gt;50)” to filter the genotypes. This procedure was conducted by bcftools.\n\n\n\nbash script\n\nsperm_sample_nameList=\"../datasets/sperm_sample_namelist/sperm_sample_nameList.tsv\"\n\n        echo \"Extract VCF: QUAL_and_no_ALT\"\n\n        for i in chr{1..22}\n        do\n                echo \"chr: ${i}\"\n\n                while read vcf_file; do\n\n                        vcf_input=\"../datasets/sperm_vcf_file/raw_vcf/chr${i}/${vcf_file}.vcf.gz\"\n                        vcf_output=\"../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr${i}/${vcf_file}.vcf.gz\"\n\n                        #echo \"vcf input directory: ${vcf_input}\"\n                        #echo \"vcf output directory: ${vcf_output}\"\n\n                        bcftools view -O z -o ${vcf_output} -i '(QUAL&gt;10) || (ALT=\".\"&FMT/RGQ&gt;50)' ${vcf_input}\n\n                done &lt;${sperm_sample_nameList}\n        done"
  },
  {
    "objectID": "section_2_aneuploidy_test.html#sequencing-depth-in-windows",
    "href": "section_2_aneuploidy_test.html#sequencing-depth-in-windows",
    "title": "3  Aneuploidy Test",
    "section": "3.1 Sequencing Depth in windows",
    "text": "3.1 Sequencing Depth in windows\nBased on the aligned sperm sequence and blood sequence, we can use cnvseq to call the depth in slide window and the CNV.\n\n\n\nR script (Need to delete)\n\ncnv_count_directory &lt;- \"../datasets/sperm_cnv_windows/\"\nfigure_out_directory &lt;- \"../figures/figure_cnv_plot/\"\n\nfileList &lt;- list.files(path = cnv_count_directory, pattern = \"*.cnv$\", all.files = FALSE,\n                       full.names = FALSE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)\n\nCNV_list &lt;- list()\n\nfor (sperm_count_file in fileList) {\n  \n  sperm_ID &lt;- gsub(\"\\\\..*\",\"\", sperm_count_file)\n  \n  ## Input the output from cnv-seq\n  cnv &lt;- read.table(paste0(cnv_count_directory, sperm_count_file), header = T)\n  \n  ## Extract the cnv in chr1 to chr22 and chrX and chrY\n  cnv &lt;- cnv[cnv$chromosome %in% c(paste0(\"chr\", c(1:22))), ]\n  \n  cnv$chromosome &lt;- factor(cnv$chromosome, levels = c(paste0(\"chr\", c(1:22))))\n  \n  cnv &lt;- cnv[order(cnv$chromosome),]\n  \n  ## cnv$color &lt;- colByChr(as.character(cnv$chromosome), colors = \"2blues\")\n  \n  rownames(cnv) &lt;- NULL\n  \n  ## Delete the log2 NA\n  cnv &lt;- cnv[!is.na(cnv$log2), ]\n  \n  ### Assign (pos or neg) sign to the cnv value\n  cnv$cn.withDir &lt;- ifelse(is.na(cnv$cnv.log2), 0, cnv$cnv.log2)\n  \n  CNV_list[[sperm_ID]] &lt;- cnv\n    \n  cnv_GRanges &lt;- makeGRangesFromDataFrame(cnv)\n  \n  \n  cnv_GRanges$lrr &lt;- cnv$log2\n  \n  \n  # cnv_GRanges$cn &lt;- cnv$cnv.log2\n  # cnv_GRanges$color &lt;- cnv$color\n    \n  cncalls &lt;- loadCopyNumberCalls(cnv, cn.col=\"cn.withDir\")\n  \n  ## \n  if(FALSE){\n    \n    pdf(paste0(figure_out_directory, sperm_ID, \".pdf\"), width = 8.3, height = 2)\n    \n    kp &lt;- plotKaryotype(\"hg38\", plot.type = 4, labels.plotter = NULL, main=\"\", cex=0.02,\n                        chromosomes=paste0(\"chr\", c(1:22)),\n                        ideogram.plotter    = NULL)\n    \n    # Plot the ideogram as a line\n    kpAddCytobandsAsLine(kp)\n    \n    kpAddChromosomeNames(kp, srt=45, cex=0.8)\n    \n    #plotLRR(kp, cnv_GRanges, ymin=-5, ymax=5, labels = NA, out.of.range = \"points\", out.of.range.col=\"red\",points.col = \"#AAAAAAAA\", line.at.0 = FALSE, points.cex = 3, add.axis = FALSE)\n  \n    # Modify the \"lrr\" values to be at most 5\n    cnv_GRanges$lrr &lt;- pmin(abs(cnv_GRanges$lrr), 5) * sign(cnv_GRanges$lrr)\n  \n    plotLRR(kp,\n            cnv_GRanges, \n            ymin=-4, \n            ymax=4, \n            labels = NA, \n            out.of.range = \"points\", \n            out.of.range.col=\"#DC0000FF\", \n            points.col = \"#AAAAAAAA\", \n            line.at.0 = FALSE, \n            points.cex = 0.8, \n            add.axis = FALSE)\n  \n  \n  #plotCopyNumberCallsAsLines(kp, cn.calls = cncalls, ymin=-2, ymax=2, lwd=6, add.axis=FALSE, labels = NA, col=\"#48B774\", style=\"segments\", r0=0.4, r1=0.6)\n  \n  kpAddChromosomeSeparators(kp, lwd=1.5, col = \"#666666\")\n  kpAxis(kp, ymin = -5, ymax=5, tick.pos = -5:5, cex=0.8, offset = 0.1)\n  kpAddLabels(kp, labels = \"Log2 Ratio\", cex=0.8, srt=90, pos=3, label.margin = 0.03)\n  # Add a title to the karyoplot using the title function\n  kpAddMainTitle(kp, sperm_ID, cex=1)\n  kpAbline(kp, h=0.5, col=\"black\", lwd=2)\n\n  \n  dev.off()\n  }\n}"
  },
  {
    "objectID": "section_3_prepare_data_for_Hapi.html#prepare-the-aneuploidy-removed-sperm-name-list",
    "href": "section_3_prepare_data_for_Hapi.html#prepare-the-aneuploidy-removed-sperm-name-list",
    "title": "4  Prepare the input data for HAPI",
    "section": "4.1 Prepare the aneuploidy removed sperm name list",
    "text": "4.1 Prepare the aneuploidy removed sperm name list"
  },
  {
    "objectID": "section_3_prepare_data_for_Hapi.html#generate-the-hpai-input-matrix",
    "href": "section_3_prepare_data_for_Hapi.html#generate-the-hpai-input-matrix",
    "title": "4  Prepare the input data for HAPI",
    "section": "4.2 Generate the Hpai input matrix",
    "text": "4.2 Generate the Hpai input matrix\n\n\n\nR script\n\nchr_id &lt;- 1\n\nblood_gt_chr &lt;- readRDS(paste0(\"../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr\", chr_id, \".rds\"))\n\nSPERM_DIRECTORY &lt;- paste0(\"../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr\", chr_id, \"/\")\n\n\nsperm_list &lt;- list.files(path = SPERM_DIRECTORY, pattern = \"*.vcf.gz$\", all.files = FALSE, \n                              full.names = FALSE, recursive = FALSE,\n                              ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)\n\nsperm_list_df &lt;- gsub(\"\\\\.vcf\\\\.gz\", \"\", sperm_list)  \nsperm_list_df &lt;- as.data.frame(sperm_list_df)\n\n#write.table(sperm_list_df, \n#            file = \"D:/sperm_project/sperm_vcf_file/sperm_sampleList/sperm_sample_nameList.tsv\", \n#            append = F, sep = \"\\t\", row.names=FALSE, col.names=FALSE, quote=FALSE)\n\n\n\n## Merge to the matrix\n\npatient_name &lt;- gsub(\"s\\\\d\\\\.vcf\\\\.gz\", \"\", sperm_list)\npatient_name &lt;- unique(patient_name)\n\nfor (chr_id in c(1:22)) {\n  ## Print the current working chrosome\n  \n  print(\"Chromosome:\")\n  print(chr_id)\n  \n  ## Read the blood genotype by chromosome\n  blood_gt_chr &lt;- readRDS(paste0(\"../datasets/simplified_blood_gt_by_chr/simplified_blood_gt_by_chr\", chr_id, \".rds\"))\n  \n  ## The Directory of filter sperm vcf file\n  Filtered_SPERM_DIRECTORY &lt;- paste0(\"../datasets/sperm_vcf_file/selected_vcf/QUAL_and_RGQ/chr\", chr_id, \"/\")\n  \n  ## Initate the Hapi Input Matirx List\n  \n  Hapi_input_matrix_List &lt;- list()\n  \n  for (patient in patient_name) {\n    \n    patient_sperm &lt;- sperm_list[grepl(paste0(patient, \"s\\\\d\"), sperm_list)]\n    \n    sperm_vcf_list &lt;- list()\n    \n    for (sperm_vcf_file in patient_sperm) {\n      \n      vcf_file &lt;- read.vcfR(paste0(Filtered_SPERM_DIRECTORY, sperm_vcf_file), verbose = FALSE)\n      vcf_file_fix_gt &lt;- as.data.frame(extract.gt(vcf_file, as.numeric = T, IDtoRowNames = T)) %&gt;% tibble::rownames_to_column(\"POS\")\n      \n      sperm_id &lt;- gsub(\"\\\\.vcf\\\\.gz\", \"\", sperm_vcf_file)\n      sperm_vcf_list[[sperm_id]] &lt;- vcf_file_fix_gt\n    }\n    \n    sperm_matrix &lt;- sperm_vcf_list %&gt;% reduce(full_join, by = c(\"POS\"))\n    sperm_matrix &lt;- sperm_matrix %&gt;% separate(POS, c('chr', 'pos'))\n    sperm_matrix &lt;- sperm_matrix[-1]\n    sperm_matrix &lt;- sperm_matrix %&gt;% mutate_if(is.character, as.integer)\n    \n    ## change NF patient name\n    \n    patient&lt;- gsub(\"N\", \"NF\", patient)\n    patient&lt;- gsub(\"NFF\", \"NF\", patient)\n    \n    blood_patient_gt &lt;- blood_gt_chr[ , c(\"chr\", \"pos\", \"ref\", \"alt\", patient)]\n    blood_patient_het_gt &lt;- blood_patient_gt[str_detect(blood_patient_gt[,5], \"0/1|0\\\\|1\"), ]\n    rownames(blood_patient_het_gt) &lt;- blood_patient_het_gt$pos\n    \n    rownames(sperm_matrix) &lt;- sperm_matrix$pos\n    common_position &lt;- intersect(rownames(sperm_matrix), rownames(blood_patient_het_gt))\n    \n    hapi_input_matrix &lt;- cbind(blood_patient_het_gt[common_position, -5], sperm_matrix[common_position, -c(1)])\n    \n    sorted_hapi_input_matrix &lt;- hapi_input_matrix[order(hapi_input_matrix$pos),]\n    \n    Hapi_input_matrix_List[[patient]] &lt;- sorted_hapi_input_matrix\n    \n  }  \n  \n  saveRDS(Hapi_input_matrix_List, paste0(\"../datasets/Hapi_input/QUAL_and_RGQ/chr\", chr_id, \".rds\"))\n}"
  },
  {
    "objectID": "section_3_prepare_data_for_Hapi.html#remove-the-aneuploidy-sperms",
    "href": "section_3_prepare_data_for_Hapi.html#remove-the-aneuploidy-sperms",
    "title": "4  Prepare the input data for HAPI",
    "section": "4.3 Remove the aneuploidy sperms",
    "text": "4.3 Remove the aneuploidy sperms"
  },
  {
    "objectID": "section_3_prepare_data_for_Hapi.html#remove-the-aneuploidy",
    "href": "section_3_prepare_data_for_Hapi.html#remove-the-aneuploidy",
    "title": "4  Prepare the input data for HAPI",
    "section": "4.4 Remove the aneuploidy",
    "text": "4.4 Remove the aneuploidy\n\n\n\nR script\n\naneuploidy_sperm_list &lt;- c(\"AS24s5\", \"AS32s4\", \"NF25-1s1\", \"NF27-3s3\")\naneuploidy_donor_list &lt;- c(\"AS24\", \"AS32\", \"NF25-1\", \"NF27-3\")\n\nNA_count_chr_list &lt;- list()  \n\nfor (chr_id in c(1:22)) {\n  Hapi_input &lt;- readRDS(paste0(\"../datasets/Hapi_input/QUAL_and_RGQ/chr\", chr_id, \".rds\"))\n  \n  for (donor in aneuploidy_donor_list) {\n    colnames(Hapi_input[[donor]]) &lt;- gsub(\"N\", \"NF\", colnames(Hapi_input[[donor]]))\n    colnames(Hapi_input[[donor]]) &lt;- gsub(\"NFF\", \"NF\", colnames(Hapi_input[[donor]]))\n    \n    Hapi_input[[donor]] &lt;- Hapi_input[[donor]][,!names(Hapi_input[[donor]]) %in% aneuploidy_sperm_list]\n  }\n  \n  NA_count_chr &lt;- c()\n  \n  for (donor in names(Hapi_input)) {\n    \n    colnames(Hapi_input[[donor]]) &lt;- gsub(\"N\", \"NF\", colnames(Hapi_input[[donor]]))\n    colnames(Hapi_input[[donor]]) &lt;- gsub(\"NFF\", \"NF\", colnames(Hapi_input[[donor]]))\n    \n    NA_count &lt;- t(Hapi_input[[donor]] %&gt;% dplyr::select(-c(chr, pos, ref, alt)) %&gt;% summarise_all(~sum(is.na(.))))/nrow(Hapi_input[[donor]])\n    NA_count_chr &lt;- rbind(NA_count_chr, NA_count)\n    \n  }\n  \n  saveRDS(Hapi_input, paste0(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/chr\", chr_id, \".rds\"))\n  \n  colnames(NA_count_chr) &lt;- paste0(\"chr\", chr_id)\n  \n  NA_count_chr_list[[paste0(\"chr\", chr_id)]] &lt;- NA_count_chr\n  \n  \n}\n\nsaveRDS(NA_count_chr_list, paste0(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/NA_count_chr_list.rds\"))"
  },
  {
    "objectID": "section_3_prepare_data_for_Hapi.html#check-the-na-density",
    "href": "section_3_prepare_data_for_Hapi.html#check-the-na-density",
    "title": "4  Prepare the input data for HAPI",
    "section": "4.5 Check the NA density",
    "text": "4.5 Check the NA density\n\n\n\nR script\n\nNA_count_chr_list &lt;- readRDS(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/NA_count_chr_list.rds\")\n  \nNA_count_chr &lt;- do.call(cbind, NA_count_chr_list)\nrownames(NA_count_chr) &lt;- gsub(\"N\", \"NF\", rownames(NA_count_chr))\nrownames(NA_count_chr) &lt;- gsub(\"NFF\", \"NF\", rownames(NA_count_chr))\n\nNA_count_chr &lt;- NA_count_chr %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(\"sperm_id\") %&gt;% \n  dplyr::mutate(Individual = gsub(\"s\\\\d+\", \"\", sperm_id), Type = ifelse(grepl(\"AS\", Individual), \"AS\", \"NF\"))\n\nNA_count_chr &lt;- melt(NA_count_chr, id=c(\"sperm_id\", \"Individual\", \"Type\"))\n\nggplot(NA_count_chr, aes(x=value, color=Type)) +\n  geom_density() + theme_bw() + \n  scale_color_manual(values=c(\"coral\", \"cornflowerblue\")) + \n  facet_grid( variable ~ .)\n\nggsave(paste0(\"../figures/QUAL_and_RGQ_aneu_removed_NA_Density.pdf\"), width = 8, height = 22*3, limitsize = FALSE)\n\nNA_count_chr &lt;- do.call(cbind, NA_count_chr_list)\nrownames(NA_count_chr) &lt;- gsub(\"N\", \"NF\", rownames(NA_count_chr))\nrownames(NA_count_chr) &lt;- gsub(\"NFF\", \"NF\", rownames(NA_count_chr))\nNA_count_chr &lt;- NA_count_chr %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(\"sperm_id\")\n\nNA_count_chr$larger_07_count &lt;- rowSums(NA_count_chr[, -1] &gt; 0.7, na.rm=FALSE)\n\nremove_by_NA_sperm_list &lt;- NA_count_chr$sperm_id[NA_count_chr$larger_07_count &gt; 2]\n\nsaveRDS(remove_by_NA_sperm_list, \"../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/remove_by_NA_sperm_list.rds\")"
  },
  {
    "objectID": "section_3_prepare_data_for_Hapi.html#regenerate-the-hapi-input",
    "href": "section_3_prepare_data_for_Hapi.html#regenerate-the-hapi-input",
    "title": "4  Prepare the input data for HAPI",
    "section": "4.6 Regenerate the Hapi input",
    "text": "4.6 Regenerate the Hapi input\n\n\n\nR script\n\nfor (chr_id in c(1:22)) {\n  Hapi_input &lt;- readRDS(paste0(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_removed/chr\", chr_id, \".rds\"))\n  \n  for (donor in names(Hapi_input)) {\n    \n    colnames(Hapi_input[[donor]]) &lt;- gsub(\"N\", \"NF\", colnames(Hapi_input[[donor]]))\n    colnames(Hapi_input[[donor]]) &lt;- gsub(\"NFF\", \"NF\", colnames(Hapi_input[[donor]]))\n    \n    Hapi_input[[donor]] &lt;- Hapi_input[[donor]][,!names(Hapi_input[[donor]]) %in% remove_by_NA_sperm_list]\n    \n  }\n  saveRDS(Hapi_input, paste0(\"D:/sperm_project/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr\", chr_id, \".rds\"))\n}"
  },
  {
    "objectID": "section_3_prepare_data_for_Hapi.html#count-the-sperm-number-in-each-individual-after-filter",
    "href": "section_3_prepare_data_for_Hapi.html#count-the-sperm-number-in-each-individual-after-filter",
    "title": "4  Prepare the input data for HAPI",
    "section": "4.7 Count the sperm number in each individual after filter",
    "text": "4.7 Count the sperm number in each individual after filter\n\n\n\nR script\n\nsperms_count &lt;- c()\n\nHapi_input &lt;- readRDS(paste0(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr\", 1, \".rds\"))\n\nfor (donor in names(Hapi_input)) {\n  \n    sperms_count &lt;- c(sperms_count, ncol(Hapi_input[[donor]]) - 4)\n    \n}\n\nnames(sperms_count) &lt;- names(Hapi_input)\n\nremove_donor &lt;- names(sperms_count[sperms_count &lt; 3])\n\nsaveRDS(remove_donor, \"../datasets/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/remove_donor.rds\")\n\n\nfor (chr_id in c(1:22)) {\n  \n  Hapi_input &lt;- readRDS(paste0(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr\", chr_id, \".rds\"))\n  \n  for (donor in remove_donor) {\n    \n    Hapi_input[[donor]] &lt;- NULL\n    \n  }\n  saveRDS(Hapi_input, paste0(\"../datasets/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr\", chr_id, \".rds\"))\n}"
  },
  {
    "objectID": "section_4_run_Hapi.html#run-hapi-on-whole-dataset",
    "href": "section_4_run_Hapi.html#run-hapi-on-whole-dataset",
    "title": "5  Run HAPI",
    "section": "5.1 Run HAPI on whole dataset",
    "text": "5.1 Run HAPI on whole dataset\nIn this example, we show the script for running one chromosome 1, and for other chromosomes can be calculated use the same code.\n\n\n\nR script\n\n#!/usr/bin/env Rscript\nargs = commandArgs(trailingOnly=TRUE)\n\n# test if there is at least one argument: if not, return an error\nif (length(args) != 1) {\n  stop(\"Input the chromosome ID\", call.=FALSE)\n} \n\nchr_id = args[1]\n\n\n# Print input information \nprint(paste0(\"Hapi run on chromosome: \", chr_id))\n\n\n## Load the library\n\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(tibble)\nlibrary(tidyr)\nlibrary(Hapi)\nlibrary(HMM)\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(vcfR)\n\n\n## Call crossover on individuals \n\nprint(\"Chromosome:\")\nprint(chr_id)\n\nchr_level_CO_table &lt;- c()\nHapi_input_matrix_List &lt;- readRDS(paste0(\"~/shared/LeiYu/sperm_project/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/chr\", chr_id, \".rds\"))\n\n\n\n### identify crossover probabilities\nfor (error_rate_co in c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)) {\n  \n  chr_level_CO_table &lt;- c()\n  \n  cv_hmm = initHMM(States=c(\"F\",\"M\"), \n                 Symbols=c(\"f\",\"m\"), \n                 transProbs=matrix(c(0.99999, 0.00001, 0.00001, 0.99999),2),\n                 emissionProbs=matrix(c(1 - error_rate_co, error_rate_co, error_rate_co, 1 - error_rate_co),2), \n                 startProbs = c(0.5,0.5))\n  \n  for (patient in names(Hapi_input_matrix_List)) {\n    possibleError &lt;-tryCatch(\n      {\n        sorted_hapi_input_matrix &lt;- Hapi_input_matrix_List[[patient]]\n        position &lt;- sorted_hapi_input_matrix$pos\n        position_order &lt;- c(1:length(position))\n        position_df &lt;- data.frame(pos = position, position_order = position_order)\n        Hapi_sperm_idList &lt;- colnames(sorted_hapi_input_matrix)[5:ncol(sorted_hapi_input_matrix)]\n        hapOutput &lt;- hapiAutoPhase(gmt = sorted_hapi_input_matrix, code = '01')\n        colnames(hapOutput) &lt;- gsub('\\\\.', \"-\", colnames(hapOutput))\n        head(hapOutput)\n        \n        ### haplotypes\n        hap &lt;- hapOutput[,c(\"hap1\", \"hap2\")]\n        head(hap)\n        \n        hap_position &lt;- as.integer(rownames(hap))\n        hap_position_order &lt;- c(1:length(hap_position))\n        hap_position_df &lt;- data.frame(pos = hap_position, hap_position_order = hap_position_order)\n        \n        ### gametes\n        gmt &lt;- hapOutput[, Hapi_sperm_idList]\n        head(gmt)\n\n        ### identify crossover\n        \n        for (Hapi_sperm_id in Hapi_sperm_idList) {\n          CO &lt;- hapiIdentifyCV(hap = hap, gmt = gmt[, Hapi_sperm_id], hmm = cv_hmm)\n          if(is.null(CO)){\n            \n          }else{\n            CO &lt;- left_join(CO, position_df, by = c(\"start\"=\"pos\"))\n            CO &lt;- left_join(CO, position_df, by = c(\"end\"=\"pos\"))\n            CO &lt;- left_join(CO, hap_position_df, by = c(\"start\"=\"pos\"))\n            CO &lt;- left_join(CO, hap_position_df, by = c(\"end\"=\"pos\"))\n            \n            Hapi_sperm_id &lt;- gsub(\"N\", \"NF\", Hapi_sperm_id)\n            Hapi_sperm_id &lt;- gsub(\"NFF\", \"NF\", Hapi_sperm_id)\n            \n            df &lt;- cbind(Individual = patient, sperm_id = Hapi_sperm_id, chr=chr_id, CO)\n            chr_level_CO_table &lt;- rbind(chr_level_CO_table, df)\n          }\n        }\n        \n        },\n      error=function(e) e)\n    if(inherits(possibleError, \"error\")) next\n    }\n  \n  ## Do the outlier filter\n  outlier_filter_chr_df &lt;- c()\n  \n  chr_i_CO &lt;- chr_level_CO_table\n  \n  sperm_id_list &lt;- unique(chr_i_CO$sperm_id)\n  \n  chr_i_CO$start_order_m_end_order &lt;- NA\n  \n  chr_i_CO$end_order_m_start_order &lt;- NA\n  \n  chr_i_CO$outlier_filter_1 &lt;- 0\n  \n  chr_i_CO$outlier_filter_2 &lt;- 0\n  \n  chr_i_CO$outlier_filter_1_and_2 &lt;- 0\n  \n  chr_i_CO$color &lt;- \"azure3\"\n  \n  for (sperm in sperm_id_list) {\n    chr_i_CO_sub &lt;- chr_i_CO %&gt;% filter(sperm_id == sperm)\n    \n    if(nrow(chr_i_CO_sub) &lt; 5){\n      chr_i_CO_sub$outlier_filter_1_and_2 = 1\n      chr_i_CO_sub$color[chr_i_CO_sub$outlier_filter_1_and_2 == 1] &lt;- \"brown3\"\n    }else{\n      \n      chr_i_CO_sub$start_order_m_end_order[2:length(chr_i_CO_sub$start_order_m_end_order)] &lt;- chr_i_CO_sub$hap_position_order.x[2:length(chr_i_CO_sub$hap_position_order.x)] - chr_i_CO_sub$hap_position_order.y[1:length(chr_i_CO_sub$hap_position_order.x) - 1]\n      chr_i_CO_sub$end_order_m_start_order[1:length(chr_i_CO_sub$start_order_m_end_order) - 1] &lt;- chr_i_CO_sub$hap_position_order.x[2:length(chr_i_CO_sub$hap_position_order.x)] - chr_i_CO_sub$hap_position_order.y[1:length(chr_i_CO_sub$hap_position_order.x) - 1]  \n      \n      quartiles_1 &lt;- quantile(chr_i_CO_sub$start_order_m_end_order, probs=c(.25, .75), na.rm = TRUE)\n      quartiles_2 &lt;- quantile(chr_i_CO_sub$end_order_m_start_order, probs=c(.25, .75), na.rm = TRUE)\n      \n      IQR_1 &lt;- IQR(chr_i_CO_sub$start_order_m_end_order[!is.na(chr_i_CO_sub$start_order_m_end_order)])\n      IQR_2 &lt;- IQR(chr_i_CO_sub$end_order_m_start_order[!is.na(chr_i_CO_sub$end_order_m_start_order)])\n      \n      Upper_1 &lt;- as.numeric(quartiles_1[2]) + 1.5*IQR_1 \n      Upper_2 &lt;- as.numeric(quartiles_2[2]) + 1.5*IQR_2 \n      \n      chr_i_CO_sub$outlier_filter_1[chr_i_CO_sub$start_order_m_end_order &gt; Upper_1] &lt;- 1\n      chr_i_CO_sub$outlier_filter_2[chr_i_CO_sub$end_order_m_start_order &gt; Upper_2] &lt;- 1\n      chr_i_CO_sub$outlier_filter_1_and_2[chr_i_CO_sub$start_order_m_end_order &gt; Upper_1 & chr_i_CO_sub$end_order_m_start_order &gt; Upper_2] &lt;- 1\n      \n      chr_i_CO_sub$color[chr_i_CO_sub$outlier_filter_1_and_2 == 1] &lt;- \"brown3\"\n      \n    }\n    outlier_filter_chr_df &lt;- rbind(outlier_filter_chr_df, chr_i_CO_sub)\n  }\n  \n  ### Outlier filter end \n  \n  ### Quantile filter start\n  \n  chr_i_CO &lt;- outlier_filter_chr_df\n  quantile_filter_chr_df &lt;- c()\n  sperm_id_list &lt;- unique(chr_i_CO$sperm_id)\n  \n  chr_i_CO$start_order_m_end_order &lt;- NA\n  chr_i_CO$end_order_m_start_order &lt;- NA\n  \n  chr_i_CO$single_sperm_quantile_filter_1 &lt;- 0\n  chr_i_CO$single_sperm_quantile_filter_2 &lt;- 0\n  chr_i_CO$single_sperm_quantile_filter_1_and_2 &lt;- 0\n  chr_i_CO$whole_sperm_chr_quantile_filter_1 &lt;- 0\n  chr_i_CO$whole_sperm_chr_quantile_filter_2 &lt;- 0\n  chr_i_CO$whole_sperm_chr_quantile_filter_1_and_2 &lt;- 0\n  \n  chr_i_CO$color &lt;- \"azure3\"\n  \n  for (sperm in sperm_id_list) {\n    \n    chr_i_CO_sub &lt;- chr_i_CO %&gt;% filter(sperm_id == sperm)\n    \n    if(nrow(chr_i_CO_sub) &lt; 5){\n      chr_i_CO_sub$quantile_filter_1_and_2 = 1\n      chr_i_CO_sub$color[chr_i_CO_sub$quantile_filter_1_and_2 == 1] &lt;- \"brown3\"\n      }else{\n        \n        chr_i_CO_sub$start_order_m_end_order[2:length(chr_i_CO_sub$start_order_m_end_order)] &lt;- chr_i_CO_sub$hap_position_order.x[2:length(chr_i_CO_sub$hap_position_order.x)] - chr_i_CO_sub$hap_position_order.y[1:length(chr_i_CO_sub$hap_position_order.x) - 1]\n        chr_i_CO_sub$end_order_m_start_order[1:length(chr_i_CO_sub$start_order_m_end_order) - 1] &lt;- chr_i_CO_sub$hap_position_order.x[2:length(chr_i_CO_sub$hap_position_order.x)] - chr_i_CO_sub$hap_position_order.y[1:length(chr_i_CO_sub$hap_position_order.x) - 1]  \n        \n        single_sperm_quantiles_1 &lt;- quantile(chr_i_CO_sub$start_order_m_end_order, probs=c(.25, .85), na.rm = TRUE)\n        single_sperm_quantiles_2 &lt;- quantile(chr_i_CO_sub$end_order_m_start_order, probs=c(.25, .85), na.rm = TRUE)\n        \n        single_sperm_Upper_1 &lt;- as.numeric(single_sperm_quantiles_1[2])\n        single_sperm_Upper_2 &lt;- as.numeric(single_sperm_quantiles_2[2])\n        \n        chr_i_CO_sub$single_sperm_quantile_filter_1[chr_i_CO_sub$start_order_m_end_order &gt; single_sperm_Upper_1] &lt;- 1\n        chr_i_CO_sub$single_sperm_quantile_filter_2[chr_i_CO_sub$end_order_m_start_order &gt; single_sperm_Upper_2] &lt;- 1\n        chr_i_CO_sub$single_sperm_quantile_filter_1_and_2[chr_i_CO_sub$start_order_m_end_order &gt; single_sperm_Upper_1 & chr_i_CO_sub$end_order_m_start_order &gt; single_sperm_Upper_2] &lt;- 1\n        chr_i_CO_sub$color[chr_i_CO_sub$single_sperm_quantile_filter_1_and_2 == 1] &lt;- \"brown3\"\n        quantile_filter_chr_df &lt;- rbind(quantile_filter_chr_df, chr_i_CO_sub)\n        }\n  }\n  \n    whole_sperm_chr_quantiles_1 &lt;- quantile(quantile_filter_chr_df$start_order_m_end_order, probs=c(.25, .85), na.rm = TRUE)\n    whole_sperm_chr_quantiles_2 &lt;- quantile(quantile_filter_chr_df$end_order_m_start_order, probs=c(.25, .85), na.rm = TRUE)\n    \n    whole_sperm_chr_Upper_1 &lt;- as.numeric(whole_sperm_chr_quantiles_1[2])\n    whole_sperm_chr_Upper_2 &lt;- as.numeric(whole_sperm_chr_quantiles_2[2])\n    \n    quantile_filter_chr_df$whole_sperm_chr_quantile_filter_1[quantile_filter_chr_df$start_order_m_end_order &gt; whole_sperm_chr_Upper_1] &lt;- 1\n    \n    quantile_filter_chr_df$whole_sperm_chr_quantile_filter_2[quantile_filter_chr_df$end_order_m_start_order &gt; whole_sperm_chr_Upper_2] &lt;- 1\n    \n    quantile_filter_chr_df$whole_sperm_chr_quantile_filter_1_and_2[quantile_filter_chr_df$start_order_m_end_order &gt; whole_sperm_chr_Upper_1 & quantile_filter_chr_df$end_order_m_start_order &gt; whole_sperm_chr_Upper_2] &lt;- 1\n    \n    quantile_filter_chr_df$color[quantile_filter_chr_df$whole_sperm_chr_quantile_filter_1_and_2 == 1] &lt;- \"brown3\"\n    \n    CV_correct_rate &lt;- 100 - error_rate_co*100\n    \n    saveRDS(quantile_filter_chr_df, paste0(\"~/shared/LeiYu/sperm_project/CO_table/QUAL_and_RGQ_aneu_NA_removed_3/hmm_\", CV_correct_rate, \"/chr\",chr_id, \".rds\"))\n\n\n}"
  },
  {
    "objectID": "section_5_filter_HAPI_output.html#outlier-filter",
    "href": "section_5_filter_HAPI_output.html#outlier-filter",
    "title": "6  Filter Hapi Result",
    "section": "6.1 Outlier Filter",
    "text": "6.1 Outlier Filter\n\n6.1.1 Outlier Filter on Whole Sperms (This step was embeded in the CO calling step)\n\n\n\nR script\n\noutlier_filter_chr_df &lt;- c()\n\nfor (chr_id in c(1:22)) {\n  \n  chr_i_CO &lt;- readRDS(paste0(\"D:/sperm_project/sperm_CO_table/QUAL_and_RGQ/chr\", chr_id, \".rds\"))\n  \n  sperm_id_list &lt;- unique(chr_i_CO$sperm_id)\n  \n  chr_i_CO$start_order_m_end_order &lt;- NA\n  \n  chr_i_CO$end_order_m_start_order &lt;- NA\n  \n  chr_i_CO$outlier_filter_1 &lt;- 0\n  \n  chr_i_CO$outlier_filter_2 &lt;- 0\n  \n  chr_i_CO$outlier_filter_1_and_2 &lt;- 0\n  \n  chr_i_CO$color &lt;- \"azure3\"\n  \n  for (sperm in sperm_id_list) {\n    chr_i_CO_sub &lt;- chr_i_CO %&gt;% filter(sperm_id == sperm)\n    \n    if(nrow(chr_i_CO_sub) &lt; 5){\n      chr_i_CO_sub$outlier_filter_1_and_2 = 1\n      chr_i_CO_sub$color[chr_i_CO_sub$outlier_filter_1_and_2 == 1] &lt;- \"brown3\"\n    }else{\n      chr_i_CO_sub$start_order_m_end_order[2:length(chr_i_CO_sub$start_order_m_end_order)] &lt;- chr_i_CO_sub$hap_position_order.x[2:length(chr_i_CO_sub$hap_position_order.x)] - chr_i_CO_sub$hap_position_order.y[1:length(chr_i_CO_sub$hap_position_order.x) - 1]\n      chr_i_CO_sub$end_order_m_start_order[1:length(chr_i_CO_sub$start_order_m_end_order) - 1] &lt;- chr_i_CO_sub$hap_position_order.x[2:length(chr_i_CO_sub$hap_position_order.x)] - chr_i_CO_sub$hap_position_order.y[1:length(chr_i_CO_sub$hap_position_order.x) - 1]  \n      \n      quartiles_1 &lt;- quantile(chr_i_CO_sub$start_order_m_end_order, probs=c(.25, .75), na.rm = TRUE)\n      quartiles_2 &lt;- quantile(chr_i_CO_sub$end_order_m_start_order, probs=c(.25, .75), na.rm = TRUE)\n      \n      IQR_1 &lt;- IQR(chr_i_CO_sub$start_order_m_end_order[!is.na(chr_i_CO_sub$start_order_m_end_order)])\n      IQR_2 &lt;- IQR(chr_i_CO_sub$end_order_m_start_order[!is.na(chr_i_CO_sub$end_order_m_start_order)])\n      \n      Upper_1 &lt;- as.numeric(quartiles_1[2]) + 1.5*IQR_1 \n      Upper_2 &lt;- as.numeric(quartiles_2[2]) + 1.5*IQR_2 \n      \n      chr_i_CO_sub$outlier_filter_1[chr_i_CO_sub$start_order_m_end_order &gt; Upper_1] &lt;- 1\n      chr_i_CO_sub$outlier_filter_2[chr_i_CO_sub$end_order_m_start_order &gt; Upper_2] &lt;- 1\n      chr_i_CO_sub$outlier_filter_1_and_2[chr_i_CO_sub$start_order_m_end_order &gt; Upper_1 & chr_i_CO_sub$end_order_m_start_order &gt; Upper_2] &lt;- 1\n      \n      chr_i_CO_sub$color[chr_i_CO_sub$outlier_filter_1_and_2 == 1] &lt;- \"brown3\"\n      \n    }\n    outlier_filter_chr_df &lt;- rbind(outlier_filter_chr_df, chr_i_CO_sub)\n  }\n  \n}\n\nsaveRDS(outlier_filter_chr_df, \"D:/sperm_project/sperm_CO_table/QUAL_and_RGQ_filtered_table/outlier_exclude_end.rds\")\n\n\n\n\n6.1.2 85% Quantile Filter on Whole Sperms (This step was embeded in the CO calling step)\n\n\n\nR script\n\noutlier_filter_chr_df &lt;- readRDS(\"D:/sperm_project/sperm_CO_table/QUAL_and_RGQ_filtered_table/outlier_exclude_end.rds\")\n\nquantile_filter_chr_df &lt;- c()\n\nfor (chr_id in c(1:22)) {\n  \n  chr_i_CO &lt;- outlier_filter_chr_df %&gt;% dplyr::filter(chr == chr_id)\n  \n  sperm_id_list &lt;- unique(chr_i_CO$sperm_id)\n  \n  chr_i_CO$quantile_filter_1 &lt;- 0\n  \n  chr_i_CO$quantile_filter_2 &lt;- 0\n  \n  chr_i_CO$quantile_filter_1_and_2 &lt;- 0\n  \n  for (sperm in sperm_id_list) {\n    chr_i_CO_sub &lt;- chr_i_CO %&gt;% filter(sperm_id == sperm)\n    \n    if(sum(chr_i_CO_sub$outlier_filter_1_and_2) &gt; 0){\n    }else{\n      \n      quantile_1 &lt;- quantile(chr_i_CO_sub$start_order_m_end_order, probs=c(.25, .85), na.rm = TRUE)\n      quantile_2 &lt;- quantile(chr_i_CO_sub$end_order_m_start_order, probs=c(.25, .85), na.rm = TRUE)\n      Upper_1 &lt;- as.numeric(quantile_1[2])\n      Upper_2 &lt;- as.numeric(quantile_2[2])\n      \n      chr_i_CO_sub$quantile_filter_1[chr_i_CO_sub$start_order_m_end_order &gt; Upper_1] &lt;- 1\n      chr_i_CO_sub$quantile_filter_2[chr_i_CO_sub$end_order_m_start_order &gt; Upper_2] &lt;- 1\n      chr_i_CO_sub$quantile_filter_1_and_2[chr_i_CO_sub$start_order_m_end_order &gt; Upper_1 & chr_i_CO_sub$end_order_m_start_order &gt; Upper_2] &lt;- 1\n      \n      chr_i_CO_sub$color[chr_i_CO_sub$quantile_filter_1_and_2 == 1] &lt;- \"blue\"\n      \n    }\n    quantile_filter_chr_df &lt;- rbind(quantile_filter_chr_df, chr_i_CO_sub)\n  }\n  \n}\n\nsaveRDS(quantile_filter_chr_df, \"D:/sperm_project/sperm_CO_table/QUAL_and_RGQ_filtered_table/exclude_end_quantile_85.rds\")\n\n\n\n\n6.1.3 75% Quantile Filter on Whole Sperms\n\n\n\nR script\n\nerror_rate_vector = c(\"40\", \"30\", \"20\")\n\n\nfor (i in error_rate_vector) {\n  \n  outlier_filter_chr_df &lt;- readRDS(paste0(\"D:/sperm_project/sperm_CO_table/QUAL_and_RGQ_aneu_NA_removed_3/hmm_\", i, \".rds\"))\n  quantile_filter_chr_df &lt;- c()\n  \n  for (chr_id in c(1:22)) {\n    \n    chr_i_CO &lt;- outlier_filter_chr_df %&gt;% dplyr::filter(chr == chr_id)\n    sperm_id_list &lt;- unique(chr_i_CO$sperm_id)\n    \n    chr_i_CO$single_sperm_quantile_filter_1_75 &lt;- 0\n    chr_i_CO$single_sperm_quantile_filter_2_75 &lt;- 0\n    chr_i_CO$single_sperm_quantile_filter_1_and_2_75 &lt;- 0\n    \n    for (sperm in sperm_id_list) {\n      chr_i_CO_sub &lt;- chr_i_CO %&gt;% filter(sperm_id == sperm)\n      \n      if(nrow(chr_i_CO_sub) &lt; 5){\n      chr_i_CO_sub$quantile_filter_1_and_2_75 = 1\n      chr_i_CO_sub$color[chr_i_CO_sub$quantile_filter_1_and_2_75 == 1] &lt;- \"brown3\"\n      }else{\n        \n        single_sperm_quantiles_1 &lt;- quantile(chr_i_CO_sub$start_order_m_end_order, probs=c(.25, .75), na.rm = TRUE)\n        single_sperm_quantiles_2 &lt;- quantile(chr_i_CO_sub$end_order_m_start_order, probs=c(.25, .75), na.rm = TRUE)\n        \n        single_sperm_Upper_1 &lt;- as.numeric(single_sperm_quantiles_1[2])\n        single_sperm_Upper_2 &lt;- as.numeric(single_sperm_quantiles_2[2])\n        \n        chr_i_CO_sub$single_sperm_quantile_filter_1_75[chr_i_CO_sub$start_order_m_end_order &gt; single_sperm_Upper_1] &lt;- 1\n        chr_i_CO_sub$single_sperm_quantile_filter_2_75[chr_i_CO_sub$end_order_m_start_order &gt; single_sperm_Upper_2] &lt;- 1\n        chr_i_CO_sub$single_sperm_quantile_filter_1_and_2_75[chr_i_CO_sub$start_order_m_end_order &gt; single_sperm_Upper_1 & chr_i_CO_sub$end_order_m_start_order &gt; single_sperm_Upper_2] &lt;- 1\n        chr_i_CO_sub$color[chr_i_CO_sub$single_sperm_quantile_filter_1_and_2_75 == 1] &lt;- \"brown3\"\n        quantile_filter_chr_df &lt;- rbind(quantile_filter_chr_df, chr_i_CO_sub)\n        }\n  \n    }\n    saveRDS(quantile_filter_chr_df, paste0(\"D:/sperm_project/sperm_CO_table/QUAL_and_RGQ_aneu_NA_removed_3/hmm_\", i, \"_Q75.rds\"))\n\n  }\n}\n\n\n\n\n6.1.4 65% Quantile Filter on Whole Sperms\n\n\n\nR script\n\nerror_rate_vector = c(\"default\", \"90\", \"80\", \"70\", \"60\", \"40\", \"30\", \"20\")\n\n\nfor (i in error_rate_vector) {\n  \n  outlier_filter_chr_df &lt;- readRDS(paste0(\"D:/sperm_project/sperm_CO_table/QUAL_and_RGQ_aneu_NA_removed_3/hmm_\", i, \"_Q75.rds\"))\n  quantile_filter_chr_df &lt;- c()\n  \n  for (chr_id in c(1:22)) {\n    \n    chr_i_CO &lt;- outlier_filter_chr_df %&gt;% dplyr::filter(chr == chr_id)\n    sperm_id_list &lt;- unique(chr_i_CO$sperm_id)\n    \n    chr_i_CO$single_sperm_quantile_filter_1_65 &lt;- 0\n    chr_i_CO$single_sperm_quantile_filter_2_65 &lt;- 0\n    chr_i_CO$single_sperm_quantile_filter_1_and_2_65 &lt;- 0\n    \n    for (sperm in sperm_id_list) {\n      chr_i_CO_sub &lt;- chr_i_CO %&gt;% filter(sperm_id == sperm)\n      \n      if(nrow(chr_i_CO_sub) &lt; 5){\n      chr_i_CO_sub$quantile_filter_1_and_2_65 = 1\n      chr_i_CO_sub$color[chr_i_CO_sub$quantile_filter_1_and_2_65 == 1] &lt;- \"brown3\"\n      }else{\n        \n        single_sperm_quantiles_1 &lt;- quantile(chr_i_CO_sub$start_order_m_end_order, probs=c(.25, .65), na.rm = TRUE)\n        single_sperm_quantiles_2 &lt;- quantile(chr_i_CO_sub$end_order_m_start_order, probs=c(.25, .65), na.rm = TRUE)\n        \n        single_sperm_Upper_1 &lt;- as.numeric(single_sperm_quantiles_1[2])\n        single_sperm_Upper_2 &lt;- as.numeric(single_sperm_quantiles_2[2])\n        \n        chr_i_CO_sub$single_sperm_quantile_filter_1_65[chr_i_CO_sub$start_order_m_end_order &gt; single_sperm_Upper_1] &lt;- 1\n        chr_i_CO_sub$single_sperm_quantile_filter_2_65[chr_i_CO_sub$end_order_m_start_order &gt; single_sperm_Upper_2] &lt;- 1\n        chr_i_CO_sub$single_sperm_quantile_filter_1_and_2_65[chr_i_CO_sub$start_order_m_end_order &gt; single_sperm_Upper_1 & chr_i_CO_sub$end_order_m_start_order &gt; single_sperm_Upper_2] &lt;- 1\n        chr_i_CO_sub$color[chr_i_CO_sub$single_sperm_quantile_filter_1_and_2_65 == 1] &lt;- \"brown3\"\n        quantile_filter_chr_df &lt;- rbind(quantile_filter_chr_df, chr_i_CO_sub)\n        }\n  \n    }\n    saveRDS(quantile_filter_chr_df, paste0(\"D:/sperm_project/sperm_CO_table/QUAL_and_RGQ_aneu_NA_removed_3/hmm_\", i, \"_Q65.rds\"))\n\n  }\n}\n\n\n\n\n\nR script\n\ni = \"70\"\n\nCO_table &lt;- readRDS(paste0(\"D:/sperm_project/sperm_CO_table/QUAL_and_RGQ_aneu_NA_removed_3/hmm_\", i, \"_Q65.rds\"))\n\n## Order of selection\n## Outlier\n\noutlier_filtered_CO &lt;- CO_table %&gt;% dplyr::filter(outlier_filter_1_and_2 == 1)\n\n\n## Single Sperm 85 qunatile\n\nselected_sperm_and_chr &lt;- unique(outlier_filtered_CO %&gt;% dplyr::select(sperm_id, chr))\n\nremove_outlier_filtered_CO &lt;- dplyr::anti_join(CO_table, selected_sperm_and_chr, by = c(\"sperm_id\", \"chr\"))\n\nquantile_85_single_sperm_filtered_CO &lt;- remove_outlier_filtered_CO %&gt;% dplyr::filter(single_sperm_quantile_filter_1_and_2 == 1)\n\n\n## Single Sperm 75 quantile \n\nselected_sperm_and_chr &lt;- unique(quantile_85_single_sperm_filtered_CO %&gt;% dplyr::select(sperm_id, chr))\n\nremove_quantile_85_single_sperm_filtered_CO &lt;-  dplyr::anti_join(remove_outlier_filtered_CO, selected_sperm_and_chr, by = c(\"sperm_id\", \"chr\"))\n\nquantile_75_single_sperm_filtered_CO &lt;- remove_quantile_85_single_sperm_filtered_CO %&gt;% dplyr::filter( single_sperm_quantile_filter_1_and_2_75 == 1)\n\n## Combine three filter CO\n\nfinal_filtered_table &lt;- rbind(outlier_filtered_CO, quantile_85_single_sperm_filtered_CO, quantile_75_single_sperm_filtered_CO) %&gt;% mutate(chr = as.numeric(chr)) %&gt;% arrange(Individual, sperm_id, chr)\n\nchr_level_CO_table_new &lt;- final_filtered_table %&gt;% dplyr::mutate(Type = ifelse(grepl(\"AS\", Individual), \"AS\", \"NF\"))\n\n\n\n\n\nR script\n\n##\n## Load the sperm sample name list\nsperm_list_df &lt;- fread(\"D:/sperm_project/sperm_vcf_file/sperm_sampleList/sperm_sample_nameList.tsv\", header = F) %&gt;% as.data.frame()\n\n## Unify the sperm name in normal samples\ncolnames(sperm_list_df) &lt;- \"sperm_id\"\n\nsperm_list_df$sperm_id &lt;- gsub(\"N\", \"NF\", sperm_list_df$sperm_id)\nsperm_list_df$sperm_id &lt;- gsub(\"NFF\", \"NF\", sperm_list_df$sperm_id)\n\n## Load the NA deleted sperm\nNA_removed_sperm &lt;- readRDS(\"D:/sperm_project/Hapi_input/QUAL_and_RGQ_aneu_removed/remove_by_NA_sperm_list.rds\")\n\n\n## Load the less 3 sperm individual\n\nless_three_sperm_donor &lt;- readRDS(\"D:/sperm_project/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/remove_donor.rds\")\n\n## Remove the aneuploidy sperms\n\naneuploid_sperms &lt;- c(\"AS24s5\", \"AS30s3\", \"AS30s4\", \"AS32s4\", \"AS35s1\", \"AS41s4\", \"NF23-1s5\", \"NF25-1s1\", \"NF31-2s5\", \"NF30-2s3\", \"NF27-3s3\", NA_removed_sperm) \n\n\nsperm_list_df &lt;- sperm_list_df %&gt;% dplyr::filter(!sperm_id %in% aneuploid_sperms)\n\n\n\nsperm_chromosome_level_CO_freq &lt;- data.frame(sperm_id = rep(sperm_list_df[,1], each = 22),\n                                             chr = rep(c(1:22), times = length(sperm_list_df[,1])))\n\nsperm_chromosome_level_CO_freq$Individual &lt;- gsub(\"s\\\\d$\", \"\", sperm_chromosome_level_CO_freq$sperm_id)\n\n## Count the number of CO over chromosomes in chr_level_CO_table\n\nchr_level_CO_table_number_table &lt;- chr_level_CO_table_new %&gt;% group_by(Individual, sperm_id, chr) %&gt;% \n  dplyr::summarise(chromosome_CO_count = n(), .groups = 'drop') %&gt;%\n  as.data.frame()\n\n## Left join\n\neach_sperm_chromosome_level_CO_freq &lt;- left_join(sperm_chromosome_level_CO_freq, chr_level_CO_table_number_table)\n\n## Delete the aneuploidy\neach_sperm_chromosome_level_CO_freq &lt;- each_sperm_chromosome_level_CO_freq %&gt;% dplyr::filter(!sperm_id %in% aneuploid_sperms)\n\n# Delete the aneuploidy donor\neach_sperm_chromosome_level_CO_freq &lt;- each_sperm_chromosome_level_CO_freq %&gt;% dplyr::filter(!Individual %in% c(less_three_sperm_donor))\n\n\neach_sperm_chromosome_level_CO_freq &lt;- each_sperm_chromosome_level_CO_freq %&gt;% mutate(chromosome_CO_count = ifelse(is.na(chromosome_CO_count), 0, chromosome_CO_count)) %&gt;% \n  mutate(Type = ifelse(grepl(\"AS\", Individual), \"AS\", \"NF\"))\n\n\n##\n\n\n\n\n\nR script\n\n# Filter the original dataset to count occurrences of zero chromosome_CO_count\nzero_count_table &lt;- each_sperm_chromosome_level_CO_freq %&gt;%\n  filter(chromosome_CO_count == 0) %&gt;%\n  count(sperm_id)\n\n# Make a copy of the original dataset\ninput_data &lt;- each_sperm_chromosome_level_CO_freq\n  \n# Get the sperm_ids to remove based on the threshold\nremoved_donor_by_CO_number &lt;- zero_count_table$sperm_id[zero_count_table$n &gt; 15]\n  \n# Filter out donors with less than three sperm\ninput_data &lt;- input_data %&gt;%\n  filter(!Individual %in% less_three_sperm_donor)\n  \n# Filter out donors with chromosome_CO_count greater than threshold\ninput_data &lt;- input_data %&gt;%\n  filter(!sperm_id %in% removed_donor_by_CO_number)\n  \n# T test on chromosomal crossover number\nAS_group_count &lt;- input_data[input_data$Type == \"AS\", \"chromosome_CO_count\"]\nAS_group_count[is.na(AS_group_count)] &lt;- 0\n  \nNF_group_count &lt;- input_data[input_data$Type == \"NF\", \"chromosome_CO_count\"]\nNF_group_count[is.na(NF_group_count)] &lt;- 0\n  \nt_test_res &lt;- t.test(AS_group_count, NF_group_count)\n\n\n\n\n\nR script\n\n# Create the plot with larger text size and other customizations\nggplot(input_data, aes(x = Type, y = chromosome_CO_count)) +\n  geom_jitter(aes(colour = Type), size = 1.5, width = 0.2, height = 0.4) +\n  scale_color_manual(values = c(\"coral\", \"cornflowerblue\")) +\n  ylim(c(0,10)) +\n  scale_y_continuous(breaks = seq(0, 10, by = 1)) +  # Set custom y-axis tick values\n  labs(x = \"\", y = \"Count\") +  # Update axis labels\n  theme_minimal() +  # Use a minimal theme for cleaner appearance\n  theme(text = element_text(size = 18, color = \"black\"),\n        legend.position=\"none\",\n        axis.text.x = element_text(color = \"black\"),  # X-axis text color\n        axis.text.y = element_text(color = \"black\"),\n        panel.border = element_rect(\n          color = \"black\",  # Border color\n          size = 2,         # Border size (adjust as needed)\n          fill = NA         # No fill inside the border\n          )) + stat_compare_means(method = \"wilcox.test\", paired = FALSE, label.y = 5.5)\n  \n\n\n\nggsave(paste0(\"D:/sperm_project/sperm_CO_table/sperm_CO_each_chr.pdf\"), width = 8, height = 8)  \n## sperms on each chromosome\n\nggplot(input_data, aes(x = Type, y = chromosome_CO_count)) + \n  geom_jitter(aes(colour = Type), size = 1.5, width = 0.2, height = 0.5) + \n  scale_color_manual(values = c(\"coral\", \"cornflowerblue\")) +\n  scale_y_continuous(breaks = seq(0, 10, by = 1), limits = c(0, 6)) +  # Set custom y-axis tick values and limits\n  theme_minimal() +\n  facet_wrap(~ chr, nrow = 2) +\n  theme(\n    panel.grid.major.y = element_line(color = \"gray\", linewidth = 0.8),  # Adjust the color and size of horizontal gridlines\n    panel.border = element_rect(\n      color = \"black\",\n      size = 2,\n      fill = NA\n    ),\n    text = element_text(size = 18, color = \"black\"),\n        legend.position=\"none\",\n        axis.text.x = element_text(color = \"black\"),  # X-axis text color\n        axis.text.y = element_text(color = \"black\")\n  ) + stat_compare_means(method = \"wilcox.test\", paired = FALSE, label.y = 5.5)"
  },
  {
    "objectID": "section_5_filter_HAPI_output.html#remove-by-invidual",
    "href": "section_5_filter_HAPI_output.html#remove-by-invidual",
    "title": "6  Filter Hapi Result",
    "section": "6.2 remove by invidual",
    "text": "6.2 remove by invidual\n\n\n\nR script\n\ni = \"70\"\n\nCO_table &lt;- readRDS(paste0(\"D:/sperm_project/sperm_CO_table/QUAL_and_RGQ_aneu_NA_removed_3/hmm_\", i, \"_Q65.rds\"))\n\n## Order of selection\n## Outlier\n\noutlier_filtered_CO &lt;- CO_table %&gt;% dplyr::filter(outlier_filter_1_and_2 == 1)\n\n\n## Single Sperm 85 qunatile\n\nselected_sperm_and_chr &lt;- unique(outlier_filtered_CO %&gt;% dplyr::select(sperm_id, chr))\n\nremove_outlier_filtered_CO &lt;- dplyr::anti_join(CO_table, selected_sperm_and_chr, by = c(\"sperm_id\", \"chr\"))\n\nquantile_85_single_sperm_filtered_CO &lt;- remove_outlier_filtered_CO %&gt;% dplyr::filter(single_sperm_quantile_filter_1_and_2 == 1)\n\n\n## Single Sperm 75 quantile \n\nselected_sperm_and_chr &lt;- unique(quantile_85_single_sperm_filtered_CO %&gt;% dplyr::select(sperm_id, chr))\n\nremove_quantile_85_single_sperm_filtered_CO &lt;-  dplyr::anti_join(remove_outlier_filtered_CO, selected_sperm_and_chr, by = c(\"sperm_id\", \"chr\"))\n\nquantile_75_single_sperm_filtered_CO &lt;- remove_quantile_85_single_sperm_filtered_CO %&gt;% dplyr::filter( single_sperm_quantile_filter_1_and_2_75 == 1)\n\n## Combine three filter CO\n\nfinal_filtered_table &lt;- rbind(outlier_filtered_CO, quantile_85_single_sperm_filtered_CO, quantile_75_single_sperm_filtered_CO) %&gt;% mutate(chr = as.numeric(chr)) %&gt;% arrange(Individual, sperm_id, chr)\n\nchr_level_CO_table_new &lt;- final_filtered_table %&gt;% dplyr::mutate(Type = ifelse(grepl(\"AS\", Individual), \"AS\", \"NF\"))\n\nsaveRDS(chr_level_CO_table_new, \"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/final_filtered_table.rds\")\n\nchr_level_CO_table_new &lt;- readRDS(\"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/final_filtered_table.rds\")\n\n\n\n\n\nR script\n\n##\n## Load the sperm sample name list\nsperm_list_df &lt;- fread(\"D:/sperm_project/sperm_vcf_file/sperm_sampleList/sperm_sample_nameList.tsv\", header = F) %&gt;% as.data.frame()\n\n## Unify the sperm name in normal samples\ncolnames(sperm_list_df) &lt;- \"sperm_id\"\n\nsperm_list_df$sperm_id &lt;- gsub(\"N\", \"NF\", sperm_list_df$sperm_id)\nsperm_list_df$sperm_id &lt;- gsub(\"NFF\", \"NF\", sperm_list_df$sperm_id)\n\n## Load the NA deleted sperm\nNA_removed_sperm &lt;- readRDS(\"D:/sperm_project/Hapi_input/QUAL_and_RGQ_aneu_removed/remove_by_NA_sperm_list.rds\")\n\n\n## Load the less 3 sperm individual\n\nless_three_sperm_donor &lt;- readRDS(\"D:/sperm_project/Hapi_input/QUAL_and_RGQ_aneu_NA_removed_3/remove_donor.rds\")\n\n## Remove the aneuploidy sperms\n\naneuploid_sperms &lt;- c(\"AS24s5\", \"AS30s3\", \"AS30s4\", \"AS32s4\", \"AS35s1\", \"AS41s4\", \"NF23-1s5\", \"NF25-1s1\", \"NF31-2s5\", \"NF30-2s3\", \"NF27-3s3\", NA_removed_sperm) \n\n\nsperm_list_df &lt;- sperm_list_df %&gt;% dplyr::filter(!sperm_id %in% aneuploid_sperms)\n\n\n\nsperm_chromosome_level_CO_freq &lt;- data.frame(sperm_id = rep(sperm_list_df[,1], each = 22),\n                                             chr = rep(c(1:22), times = length(sperm_list_df[,1])))\n\nsperm_chromosome_level_CO_freq$Individual &lt;- gsub(\"s\\\\d$\", \"\", sperm_chromosome_level_CO_freq$sperm_id)\n\n## Count the number of CO over chromosomes in chr_level_CO_table\n\nchr_level_CO_table_number_table &lt;- chr_level_CO_table_new %&gt;% group_by(Individual, sperm_id, chr) %&gt;% \n  dplyr::summarise(chromosome_CO_count = n(), .groups = 'drop') %&gt;%\n  as.data.frame()\n\n## Left join\n\neach_sperm_chromosome_level_CO_freq &lt;- left_join(sperm_chromosome_level_CO_freq, chr_level_CO_table_number_table)\n\n## Delete the aneuploidy\neach_sperm_chromosome_level_CO_freq &lt;- each_sperm_chromosome_level_CO_freq %&gt;% dplyr::filter(!sperm_id %in% aneuploid_sperms)\n\n# Delete the aneuploidy donor\neach_sperm_chromosome_level_CO_freq &lt;- each_sperm_chromosome_level_CO_freq %&gt;% dplyr::filter(!Individual %in% c(less_three_sperm_donor))\n\n\neach_sperm_chromosome_level_CO_freq &lt;- each_sperm_chromosome_level_CO_freq %&gt;% mutate(chromosome_CO_count = ifelse(is.na(chromosome_CO_count), 0, chromosome_CO_count)) %&gt;% \n  mutate(Type = ifelse(grepl(\"AS\", Individual), \"AS\", \"NF\"))\n\n\n##\n\n\n\n\n\nR script\n\n# Filter the original dataset to count occurrences of zero chromosome_CO_count\nzero_count_table &lt;- each_sperm_chromosome_level_CO_freq %&gt;%\n  dplyr::filter(chromosome_CO_count == 0) %&gt;%\n  dplyr::count(Individual)\n\n# Make a copy of the original dataset\ninput_data &lt;- each_sperm_chromosome_level_CO_freq\n  \n# Get the sperm_ids to remove based on the threshold\nremoved_donor_by_CO_number &lt;- zero_count_table$Individual[zero_count_table$n &gt; 32]\n\nremoved_donor_by_CO_number &lt;- removed_donor_by_CO_number[-c(1,2)]\n\n# Filter out donors with less than three sperm\ninput_data &lt;- input_data %&gt;%\n  filter(!Individual %in% less_three_sperm_donor)\n  \n# Filter out donors with chromosome_CO_count greater than threshold\ninput_data &lt;- input_data %&gt;%\n  filter(!Individual %in% removed_donor_by_CO_number)\n\n# Save the keep sample and sperms\nkept_samples_and_sperms &lt;- input_data %&gt;% dplyr::select(sperm_id, Individual) %&gt;% distinct()\n\n# Save the keep sample and sperms\n\nsaveRDS(kept_samples_and_sperms,\"D:/sperm_project/manuscript_09_23_2023/tables/sample_info/kept_samples_and_sperms.rds\")\n\n# T test on chromosomal crossover number\nAS_group_count &lt;- input_data[input_data$Type == \"AS\", \"chromosome_CO_count\"]\nAS_group_count[is.na(AS_group_count)] &lt;- 0\n  \nNF_group_count &lt;- input_data[input_data$Type == \"NF\", \"chromosome_CO_count\"]\nNF_group_count[is.na(NF_group_count)] &lt;- 0\n  \nt_test_res &lt;- t.test(AS_group_count, NF_group_count)\n\nsaveRDS(input_data, \"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/each_sperm_each_chr_CO_table.rds\")\n\n\n\n\n\nR script\n\ninput_data &lt;- readRDS(\"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/each_sperm_each_chr_CO_table.rds\")\n\n# Create the plot with larger text size and other customizations\nggplot(input_data, aes(x = Type, y = chromosome_CO_count)) +\n  geom_jitter(aes(colour = Type), size = 0.5, width = 0.2, height = 0.4, alpha = 0.8) +\n  scale_color_manual(values = c(\"coral\", \"cornflowerblue\")) +\n  ylim(c(0,10)) +\n  scale_y_continuous(breaks = seq(0, 10, by = 1)) +  # Set custom y-axis tick values\n  labs(x = \"\", y = \"Count\") +  # Update axis labels\n  theme_minimal() +  # Use a minimal theme for cleaner appearance\n  theme(\n    panel.grid.major.y = element_line(color = \"gray\", linewidth = 0.2),\n    text = element_text(size = 12, color = \"black\"),\n        legend.position=\"none\",\n        axis.text.x = element_text(color = \"black\"),  # X-axis text color\n        axis.text.y = element_text(color = \"black\"),\n        panel.border = element_rect(\n          color = \"black\",  # Border color\n          size = 1,         # Border size (adjust as needed)\n          fill = NA         # No fill inside the border\n          )) + stat_compare_means(method = \"wilcox.test\", paired = FALSE, \n                                  label.y = 7, \n                                  label.x = 1.5,\n                                  aes(label = paste0(\"Pvalue = \", after_stat(p.format))))\n  \n  ggsave(paste0(\"D:/sperm_project/manuscript_09_23_2023/Figures/section_3_CO_distribution_and_frequency_count/sperm_CO_all_chr.pdf\"), width = 4, height = 4)  \n\n## sperms on each chromosome\ninput_data$chr &lt;- paste0(\"chr\", input_data$chr)\ninput_data$chr &lt;- factor(input_data$chr, levels = paste0(\"chr\", c(1:22)))\n\nggplot(input_data, aes(x = Type, y = chromosome_CO_count)) + \n  geom_jitter(aes(colour = Type), size = 0.5, width = 0.2, height = 0.4, alpha = 0.8) + \n  scale_color_manual(values = c(\"coral\", \"cornflowerblue\")) +\n  scale_y_continuous(breaks = seq(0, 10, by = 1), limits = c(0, 6)) +  # Set custom y-axis tick values and limits\n  theme_minimal() +\n  facet_wrap(~ chr, nrow = 2) +\n  theme(\n    panel.grid.major.y = element_line(color = \"gray\", linewidth = 0.5),  # Adjust the color and size of horizontal gridlines\n    panel.border = element_rect(\n      color = \"black\",\n      size = 0.5,\n      fill = NA\n    ),\n    text = element_text(size = 12, color = \"black\"),\n    legend.position=\"none\",\n    axis.text.x = element_text(size = 12, color = \"black\", face = \"bold\"),  # X-axis text color\n    axis.text.y = element_text(size = 12, color = \"black\", face = \"bold\"),\n    axis.title.y = element_text(size = 12, color = \"black\", face = \"bold\"),\n    strip.text.x = element_text(\n      size = 12, color = \"black\", face = \"bold\"\n      ),\n    strip.text.y = element_text(\n      size = 12, color = \"black\", face = \"bold\"\n      )) + \n  labs(y = \"Count\", x = \"\") + stat_compare_means(method = \"wilcox.test\", paired = FALSE, label.y = 5.5,\n                         aes(label = paste0(\"P = \", after_stat(p.format))), size = 3)\n\nggsave(paste0(\"D:/sperm_project/manuscript_09_23_2023/Figures/section_3_CO_distribution_and_frequency_count/sperm_CO_each_chr.pdf\"), width = 8, height = 4)"
  },
  {
    "objectID": "section_5_filter_HAPI_output.html#merge-euploidy-and-aneuploidy",
    "href": "section_5_filter_HAPI_output.html#merge-euploidy-and-aneuploidy",
    "title": "6  Filter Hapi Result",
    "section": "6.3 Merge euploidy and aneuploidy",
    "text": "6.3 Merge euploidy and aneuploidy\n\n6.3.1 Merge chr 1 to chr22"
  },
  {
    "objectID": "section_5_filter_HAPI_output.html#draw-figure",
    "href": "section_5_filter_HAPI_output.html#draw-figure",
    "title": "6  Filter Hapi Result",
    "section": "6.4 Draw Figure",
    "text": "6.4 Draw Figure\n\n\n\nR script\n\n## Draw Figure\n\nfiltered_table &lt;- readRDS(\"D:/sperm_project/sperm_CO_table/QUAL_and_RGQ_filtered_table/final_filtered_table.rds\")\n\ndonor_id_list &lt;- unique(filtered_table$Individual)\n\nfor (donor in donor_id_list) {\n  \n  test &lt;- test %&gt;% dplyr::filter(Individual == donor, chr == chr, sperm_id == sperm)\n  \n  \n  test &lt;- filtered_table %&gt;% dplyr::filter(Individual == donor)\n  test$chr &lt;- factor(paste0(\"chr\", test$chr), levels = paste0(\"chr\", c(1:22)))\n  \n  \n  sperm_number &lt;- length(unique(test$sperm_id))\n \n  \n  ggplot(test, aes(x=start_order_m_end_order, y=end_order_m_start_order)) +\n  geom_point(colour = test$color, size = 0.5 + test$outlier_filter_1_and_2 + test$quantile_filter_1_and_2, alpha = max(0.8, test$outlier_filter_1_and_2 + test$quantile_filter_1_and_2)) +\n  theme(legend.position=\"none\", text=element_text(size=12)) + \n  theme_bw() + \n  xlab(\"d1\") + ylab(\"d2\") + \n  facet_grid(sperm_id ~ chr, scales=\"free\")\n  \n  ggsave(paste0(\"D:/sperm_project/sperm_CO_table/Figure_filter_d1_d2/Quantail_filter/\", donor, \".pdf\"), width = 44, height = 2*sperm_number)  \n  \n}"
  },
  {
    "objectID": "section_5_filter_HAPI_output.html#save-the-tables",
    "href": "section_5_filter_HAPI_output.html#save-the-tables",
    "title": "6  Filter Hapi Result",
    "section": "6.5 Save the tables",
    "text": "6.5 Save the tables\n\n\n\nR script\n\neach_sperm_chromosome_level_CO_freq &lt;- readRDS(\"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/each_sperm_each_chr_CO_table.rds\")\n\n## Make the table about Sperm level average crossover\n\nsperm_level_ave_chr_CO_freq &lt;- each_sperm_chromosome_level_CO_freq %&gt;% \n  group_by(sperm_id) %&gt;% \n  summarise(Sperm_ave_all_chr_level_CO = mean(chromosome_CO_count, na.rm=TRUE)) %&gt;%  as.data.frame() %&gt;%\n  mutate(Type = ifelse(grepl(\"AS\", sperm_id ), \"AS\", \"NF\")) %&gt;% as.data.frame()\n\nsaveRDS(sperm_level_ave_chr_CO_freq, \"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/sperm_level_ave_chr_CO_freq.rds\")\n\n## Plot the single sperm \n## sperms on each chromosome\n\nggplot(sperm_level_ave_chr_CO_freq, aes(x = Type, y = Sperm_ave_all_chr_level_CO)) + \n  geom_jitter(aes(colour = Type), size = 1, width = 0.2, height = 0.4, alpha = 0.8) + \n  scale_color_manual(values = c(\"coral\", \"cornflowerblue\")) +\n  scale_y_continuous(breaks = seq(0, 10, by = 1), limits = c(0, 3)) +  # Set custom y-axis tick values and limits\n  theme_minimal() +\n  theme(\n    panel.grid.major.y = element_line(color = \"gray\", linewidth = 0.5),  # Adjust the color and size of horizontal gridlines\n    panel.border = element_rect(\n      color = \"black\",\n      size = 1,\n      fill = NA\n    ),\n    text = element_text(size = 12, color = \"black\"),\n    legend.position=\"none\",\n    axis.text.x = element_text(size = 12, color = \"black\", face = \"bold\"),  # X-axis text color\n    axis.text.y = element_text(size = 12, color = \"black\", face = \"bold\"),\n    axis.title.y = element_text(size = 12, color = \"black\", face = \"bold\")\n  ) + \n  labs(y = \"Count\", x = \"\") + stat_compare_means(method = \"wilcox.test\", paired = FALSE, label.y = 3,\n                                         label.x = 1.5,\n                                         aes(label = paste0(\"P = \", after_stat(p.format))), size = 3)\n\nggsave(paste0(\"D:/sperm_project/manuscript_09_23_2023/Figures/section_3_CO_distribution_and_frequency_count/each_sperm_chr_ave.pdf\"), width = 4, height = 4) \n\n\n\n## Individual level all chr ave CO table\n\nsperm_level_ave_chr_CO_freq$Individual &lt;- gsub(\"s\", \"\", str_extract(sperm_level_ave_chr_CO_freq$sperm_id, str_c(c(\"AS\\\\d+s\", \"AS\\\\d+-\\\\d+\", \"NF\\\\d+-\\\\d\"), collapse = \"|\")))\n\nIndividual_level_CO_freq &lt;- sperm_level_ave_chr_CO_freq %&gt;% group_by(Individual) %&gt;% summarise(Individual_level_CO_freq = mean(Sperm_ave_all_chr_level_CO, na.rm=TRUE)) %&gt;%  as.data.frame() %&gt;%\n  mutate(Type = ifelse(grepl(\"AS\", Individual), \"AS\", \"NF\")) %&gt;% as.data.frame() %&gt;% mutate(energy = exp(Individual_level_CO_freq))\n\n## Save the individual level co freq dataset\nsaveRDS(Individual_level_CO_freq, \"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/Individual_level_CO_freq.rds\")"
  },
  {
    "objectID": "section_5_filter_HAPI_output.html#average-crossover-and-chromosome",
    "href": "section_5_filter_HAPI_output.html#average-crossover-and-chromosome",
    "title": "6  Filter Hapi Result",
    "section": "6.6 Average Crossover and Chromosome",
    "text": "6.6 Average Crossover and Chromosome\n\n\n\nR script\n\neach_sperm_chromosome_level_CO_freq &lt;- readRDS(\"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/each_sperm_each_chr_CO_table.rds\")\nfwrite(each_sperm_chromosome_level_CO_freq,\n       \"C:/Users/yulei/Google Drive/Research Jia Lab/Project_3_Sperm/manuscript/Tables/each_sperm_chromosome_level_CO_freq.csv\")\n\neach_chromosome_ave_CO_freq &lt;- each_sperm_chromosome_level_CO_freq %&gt;% dplyr::group_by(chr, Type) %&gt;% summarize(Average_Value = mean(chromosome_CO_count))\n\nggplot(data = each_chromosome_ave_CO_freq, aes(x = chr, y = Average_Value, color = Type)) +\n  ggpmisc::stat_poly_eq(aes(label = paste(after_stat(eq.label),\n                               after_stat(rr.label), sep = \"*\\\", \\\"*\"))) +\n  stat_poly_line(se = FALSE) +\n  geom_point(size = 2) + \n  labs(\n       x = \"Chromosome\",\n       y = \"Ave. CO Number\") +\n  scale_color_manual(values=c(\"coral\", \"cornflowerblue\")) + theme_classic2() +\n  theme(legend.position = \"none\",\n        panel.border = element_rect(\n          color = \"black\",\n          size = 1,\n          fill = NA\n          ),\n        text = element_text(size = 12, color = \"black\"),\n        axis.text.x = element_text(size = 12, color = \"black\", face = \"bold\"),  # X-axis text color\n        axis.text.y = element_text(size = 12, color = \"black\", face = \"bold\"),\n        axis.title.x = element_text(size = 12, color = \"black\", face = \"bold\"),\n        axis.title.y = element_text(size = 12, color = \"black\", face = \"bold\")\n        ) + scale_x_continuous(breaks = seq(1, 22, by = 1))\n\nggsave(paste0(\"D:/sperm_project/manuscript_09_23_2023/Figures/section_3_CO_distribution_and_frequency_count/CO_and_chromosome.pdf\"), width = 8, height = 3)"
  },
  {
    "objectID": "section_6_compare_CO.html#co-distribution",
    "href": "section_6_compare_CO.html#co-distribution",
    "title": "7  Compare CO",
    "section": "7.1 CO Distribution",
    "text": "7.1 CO Distribution\n\n\n\nR script\n\nchr_level_CO_table &lt;- readRDS(\"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/final_filtered_table.rds\")\n\nchr_level_CO_table_new &lt;- chr_level_CO_table %&gt;% dplyr::mutate(Type = ifelse(grepl(\"AS\", Individual), \"AS\", \"NF\"))\n\nfwrite(chr_level_CO_table_new, \"D:/sperm_project/manuscript_09_23_2023/Tables/section_3_crossover/all_co_events.csv\")\n\n#### Visulization of the crossover events ####\n\n# Make a GRanges with your data (we need to repeat column 2 as start and end for this to work)\nchr_level_CO_table_new_gr_df_AS &lt;- chr_level_CO_table_new %&gt;% dplyr::select(chr, start, end, Type) %&gt;% dplyr::mutate(chr = paste0(\"chr\", chr)) %&gt;% dplyr::filter(Type == \"AS\")\n\nchr_level_CO_table_new_gr_df_NF &lt;- chr_level_CO_table_new %&gt;% dplyr::select(chr, start, end, Type) %&gt;% dplyr::mutate(chr = paste0(\"chr\", chr)) %&gt;% dplyr::filter(Type == \"NF\")\n\n# Make the crosssover genomic range variable  \nco.gr_AS &lt;- regioneR::toGRanges(chr_level_CO_table_new_gr_df_AS[, c(\"chr\",\"start\", \"end\")])\nco.gr_NF &lt;- regioneR::toGRanges(chr_level_CO_table_new_gr_df_NF[, c(\"chr\",\"start\", \"end\")])\n\npdf(file = \"D:/sperm_project/manuscript_09_23_2023/Figures/section_3_CO_distribution_and_frequency_count/CO_Genome_Distribution_AS_NF_10_05_2023.pdf\",   # The directory you want to save the file in\n    width = 8, # The width of the plot in inches\n    height = 11) # The height of the plot in inches\n\nkp &lt;- plotKaryotype(\"hg38\", plot.type=2, labels.plotter = NULL, ideogram.plotter    = NULL, main=\"\", cex=0.2, chromosomes = c(paste0(\"chr\", c(1:22))))\n\n# Plot the ideogram as a line\nkpAddCytobandsAsLine(kp)\n  \nkpAddChromosomeNames(kp, srt=45, cex=0.5)\n\nkp &lt;- kpPlotDensity(kp, data=co.gr_AS, data.panel = 1, window.size = 500000, border=\"black\", col = \"coral\")\nkpAxis(kp, ymax=kp$latest.plot$computed.values$max.density, data.panel = 1, cex=0.5, side = 1)\n\n# Note the density of AS group crossovers in the windows\nAS_CO_density &lt;- kp$latest.plot$computed.values$density\nAS_CO_windows &lt;- as.data.frame(kp$latest.plot$computed.values$windows)\n\nAS_CO_density &lt;- cbind(AS_CO_windows, AS_CO_density)\n\n# kpAbline(kp, h=0, lty=1, ymax=kp$latest.plot$computed.values$max.density, data.panel = 1, col=\"black\", lwd = 0.2)\n\nkp &lt;- kpPlotDensity(kp, data=co.gr_NF, data.panel = 2, window.size = 500000, border=\"black\", col = \"cornflowerblue\")\nkpAxis(kp, ymax=kp$latest.plot$computed.values$max.density, data.panel = 2, cex=0.5, side = 2)\n\n# Note the density of AS group crossovers in the windows\nNF_CO_density &lt;- kp$latest.plot$computed.values$density\nNF_CO_windows &lt;- as.data.frame(kp$latest.plot$computed.values$windows)\n\nNF_CO_density &lt;- cbind(NF_CO_windows, NF_CO_density)\n\n# kpAbline(kp, h=0, lty=1, ymax=kp$latest.plot$computed.values$max.density, r0=0.6, r1=1, col=\"black\", lwd = 2)\nlegend(x = \"bottom\", fill = c(\"coral\", \"cornflowerblue\"), legend = c(\"AS\", \"NF\"), box.lwd = 4)\n\ndev.off()\n\n\n\n7.1.1 Check the hotspot density\n\n\n\nR script\n\nlibrary(biomaRt)\nlibrary(tidyverse)\ntxdb &lt;- TxDb.Hsapiens.UCSC.hg38.knownGene\n\n# Combine the AS density and NF density \nAS_NF_CO_density &lt;- left_join(AS_CO_density, NF_CO_density)\n\nAS_NF_CO_density &lt;- AS_NF_CO_density %&gt;% dplyr::select(seqnames, start, end, AS_CO_density, NF_CO_density)\n\nfwrite(AS_NF_CO_density, \"D:/sperm_project/manuscript_09_23_2023/Tables/section_3_crossover/AS_NF_Co_density.csv\")\n\nwrite.table(AS_NF_CO_density[, c(1:3)], \"D:/sperm_project/manuscript_09_23_2023/Tables/section_3_crossover/AS_NF_Co_density_windows_info.bed\", sep = \"\\t\", col.names = FALSE, quote = FALSE, row.names = FALSE)\n\n# Extract the high CO region\n\nhigh_CO_density &lt;- AS_NF_CO_density %&gt;% dplyr::filter(AS_CO_density &gt;= 2, NF_CO_density &gt;= 2)\n\ncolnames(high_CO_density)[1] &lt;- \"chr\"\n\nhigh_CO_density$chr &lt;- gsub(\"chr\", \"\", high_CO_density$chr)\n\n# specify the database\nensembl = useMart(\"ensembl\", dataset = \"hsapiens_gene_ensembl\")\n\n# queries per row\nres &lt;- high_CO_density %&gt;% \n  split(1:nrow(.)) %&gt;% \n  map(~getBM(attributes=c(\"external_gene_name\", \"chromosome_name\", \"start_position\", \"end_position\"), \n             filters = c(\"chromosome_name\" , \"start\", \"end\"), \n             values = list(.$chr, .$start, .$end), \n             mart = ensembl))\n# Function to merge a specific column, ignoring empty values\nmerge_column_ignore_empty &lt;- function(df, column_name) {\n    merged_vector &lt;- paste(df[[column_name]][df[[column_name]] != \"\"], collapse = \",\")\n    return(merged_vector)\n}\n\n# Apply the function to all data frames in the list\nmerged_vectors_list &lt;- lapply(res, merge_column_ignore_empty, column_name = \"external_gene_name\")\n\n# Bind the merged vectors as a single column\nresulting_dataframe &lt;- do.call(rbind, merged_vectors_list)\n\ncolnames(resulting_dataframe) &lt;- \"genes\"\n\nhigh_CO_density &lt;- cbind(high_CO_density, resulting_dataframe)\n\n# Output the high CO density bed file \n\nwrite.table(high_CO_density[, c(1:3)], \n            \"D:/sperm_project/manuscript_09_23_2023/Tables/section_3_crossover/high_crossover_density.bed\", \n            sep = \"\\t\", col.names = FALSE, quote = FALSE, row.names = FALSE)\n\ngenes_in_the_windows &lt;- as.vector(high_CO_density$genes)"
  },
  {
    "objectID": "section_6_compare_CO.html#co-frequency",
    "href": "section_6_compare_CO.html#co-frequency",
    "title": "7  Compare CO",
    "section": "7.1 CO Frequency",
    "text": "7.1 CO Frequency\n\n\n\nR script\n\n## Load the sperm sample name list\nsperm_list_df &lt;- fread(\"D:/sperm_project/sperm_vcf_file/sperm_sampleList/sperm_sample_nameList.tsv\", header = F) %&gt;% as.data.frame()\n\n## Remove the aneuploidy sperms\n\naneuploid_sperms &lt;- c(\"AS24s5\", \"AS30s3\", \"AS30s4\", \"AS32s4\", \"AS35s1\", \"AS41s4\", \"NF23-1s5\", \"NF25-1s1\", \"NF31-2s5\", \"N30-2s3\", \"N27-3s3\")\n\nsperm_list_df &lt;- sperm_list_df %&gt;% filter(!V1 %in% aneuploid_sperms)\n\n## Unify the sperm name in normal samples\ncolnames(sperm_list_df) &lt;- \"sperm_id\"\n\nsperm_list_df$sperm_id &lt;- gsub(\"N\", \"NF\", sperm_list_df$sperm_id)\nsperm_list_df$sperm_id &lt;- gsub(\"NFF\", \"NF\", sperm_list_df$sperm_id)\n\nsperm_chromosome_level_CO_freq &lt;- data.frame(sperm_id = rep(sperm_list_df[,1], each = 22),\n                                             chr = rep(c(1:22), times = length(sperm_list_df[,1])))\n\nsperm_chromosome_level_CO_freq$Individual &lt;- gsub(\"s\\\\d$\", \"\", sperm_chromosome_level_CO_freq$sperm_id)\n\n## Count the number of CO over chromosomes in chr_level_CO_table\n\nchr_level_CO_table_number_table &lt;- chr_level_CO_table_new %&gt;% group_by(Individual, sperm_id, chr) %&gt;% \n  summarise(chromosome_CO_count = n(),.groups = 'drop') %&gt;%\n  as.data.frame()\n\nView(chr_level_CO_table_number_table)\n\n## Count the number of CO over chromosomes in chr_level_CO_table\n\nchr_level_CO_table_number_table &lt;- chr_level_CO_table_new %&gt;% group_by(Individual, sperm_id, chr) %&gt;% \n  summarise(chromosome_CO_count = n(),.groups = 'drop') %&gt;%\n  as.data.frame()\n\nchr_level_CO_table_number_table$chr &lt;- as.integer(chr_level_CO_table_number_table$chr)\n\n## Left join\n\neach_sperm_chromosome_level_CO_freq &lt;- left_join(sperm_chromosome_level_CO_freq, chr_level_CO_table_number_table)\n\n## Delete the aneuploidy\neach_sperm_chromosome_level_CO_freq &lt;- each_sperm_chromosome_level_CO_freq %&gt;% dplyr::filter(!sperm_id %in% aneuploid_sperms)\n\neach_sperm_chromosome_level_CO_freq &lt;- each_sperm_chromosome_level_CO_freq %&gt;% mutate(chromosome_CO_count = ifelse(is.na(chromosome_CO_count), 0, chromosome_CO_count)) %&gt;% \n  mutate(Type = ifelse(grepl(\"AS\", Individual), \"AS\", \"NF\"))\n\n\n\n## Ttest on chromosome number\nAS_group_count &lt;- each_sperm_chromosome_level_CO_freq[each_sperm_chromosome_level_CO_freq$Type==\"AS\", \"chromosome_CO_count\"]\nAS_group_count[is.na(AS_group_count)] &lt;- 0\n\nNF_group_count &lt;- each_sperm_chromosome_level_CO_freq[each_sperm_chromosome_level_CO_freq$Type==\"NF\", \"chromosome_CO_count\"]\nNF_group_count[is.na(NF_group_count)] &lt;- 0\n\nt.test(AS_group_count, NF_group_count)\n\n\n\nggplot(each_sperm_chromosome_level_CO_freq, aes(x = Type, y = chromosome_CO_count)) + \n  geom_jitter(aes(colour = Type), size = 1, width = 0.3, height = 0.5) + \n  scale_color_manual(values=c(\"coral\", \"cornflowerblue\"))+\n  facet_wrap( . ~ chr) + ylim(c(0,15))\n\nggplot(each_sperm_chromosome_level_CO_freq, aes(x = Type, y = chromosome_CO_count)) + \n  geom_jitter(aes(colour = Type), size = 1, width = 0.3, height = 0.4) + \n  scale_color_manual(values=c(\"coral\", \"cornflowerblue\"))+\n  ylim(c(0,10))\n  \n  \n## Make the table about Sperm level average crossover\n\nsperm_level_ave_chr_CO_freq &lt;- each_sperm_chromosome_level_CO_freq %&gt;% \n  group_by(sperm_id) %&gt;% \n  summarise(Sperm_ave_all_chr_level_CO = mean(chromosome_CO_count, na.rm=TRUE)) %&gt;%  as.data.frame() %&gt;%\n  mutate(Type = ifelse(grepl(\"AS\", sperm_id ), \"AS\", \"NF\")) %&gt;% as.data.frame()",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Compare CO</span>"
    ]
  },
  {
    "objectID": "section_7_CO_and_clinical_outcome_association_study.html#co-and-age",
    "href": "section_7_CO_and_clinical_outcome_association_study.html#co-and-age",
    "title": "8  Crossover Frequency and Clinical Characteristics Association Study",
    "section": "8.1 CO and Age",
    "text": "8.1 CO and Age\n\n\n\nR script\n\nIndividual_level_CO_freq &lt;- readRDS(\"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/Individual_level_CO_freq.rds\")\n\nIndividual_level_CO_freq$Age &lt;- NA\n\nIndividual_level_CO_freq[grepl(\"AS\", Individual_level_CO_freq$Individual), \"Age\"] &lt;- gsub(\"AS\", \"\", Individual_level_CO_freq[grepl(\"AS\", Individual_level_CO_freq$Individual), \"Individual\"])\nIndividual_level_CO_freq[grepl(\"NF\", Individual_level_CO_freq$Individual), \"Age\"] &lt;- gsub(\"NF\", \"\", Individual_level_CO_freq[grepl(\"NF\", Individual_level_CO_freq$Individual), \"Individual\"])\nIndividual_level_CO_freq$Age &lt;- gsub(\"-\\\\d\",\"\", Individual_level_CO_freq$Age) %&gt;% as.integer()\n\nggplot(data = Individual_level_CO_freq, aes(x = Individual_level_CO_freq, y = Age, color = Type)) +\n  ggpmisc::stat_poly_eq(aes(label = paste(after_stat(eq.label),\n                               after_stat(rr.label), sep = \"*\\\", \\\"*\"))) +\n  stat_poly_line(se = FALSE) +\n  geom_point(size = 1) + \n  labs(\n       x = \"Individual Level CO Frequency\",\n       y = \"Age (in years)\") +\n  scale_color_manual(values=c(\"coral\", \"cornflowerblue\")) + theme_classic2() +\n  theme(legend.position = \"top\",\n        panel.border = element_rect(\n          color = \"black\",\n          size = 1,\n          fill = NA\n          ),\n        text = element_text(size = 12, color = \"black\"),\n        axis.text.x = element_text(size = 12, color = \"black\", face = \"bold\"),  # X-axis text color\n        axis.text.y = element_text(size = 12, color = \"black\", face = \"bold\"),\n        axis.title.x = element_text(size = 12, color = \"black\", face = \"bold\"),\n        axis.title.y = element_text(size = 12, color = \"black\", face = \"bold\")\n        ) + \n  xlim(c(0.5,1.75)) + ylim(c(20,60))\n\nggsave(paste0(\"D:/sperm_project/manuscript_09_23_2023/Figures/section_3_CO_distribution_and_frequency_count/CO_and_age.pdf\"), width = 3.5, height = 4)"
  },
  {
    "objectID": "section_7_CO_and_clinical_outcome_association_study.html#co-and-other-characteristics",
    "href": "section_7_CO_and_clinical_outcome_association_study.html#co-and-other-characteristics",
    "title": "8  Crossover Frequency and Clinical Characteristics Association Study",
    "section": "8.2 CO and Other Characteristics",
    "text": "8.2 CO and Other Characteristics\n\n\n\nR script\n\n## Read the clinical info\n\nclinical_outcome &lt;- readRDS(\"D:/sperm_project/phenotype/clinical_outcome.rds\")\n\n## Extract the AS and NF information \nAS_NF &lt;- clinical_outcome$type\nnames(AS_NF) &lt;- clinical_outcome$FID\nAS_NF &lt;- as.data.frame(AS_NF)\n\n## Based on the clinical outcome matrix, we need to change the format of the files (rownames as clinical outcomes and colnums as patients)\n\nclinical_outcome &lt;- clinical_outcome[, -c(2, ncol(clinical_outcome))]\n\n## Replace outliers and replace with mean\nreplace_outlier_with_mean &lt;- function(x) {\n  replace(x, x %in% boxplot.stats(x)$out, mean(x))  \n}\n\nclinical_outcome[,-1] &lt;- lapply(clinical_outcome[, -1], replace_outlier_with_mean)\n\n\nclinical_outcome$Individual &lt;- str_extract(clinical_outcome$FID, str_c(c(\"AS\\\\d+\", \"NF\\\\d+-\\\\d\"), collapse = \"|\"))\nclinical_outcome[clinical_outcome$FID == \"AS32YRB\", \"Individual\"] = \"AS32-1\" \n\n## Now we can get clinical outcome with the same Individual ID with Sperm CO Individual IDs\n\n## Next, we are going to do a correltation study about the important clinical outcomes\n\nselected_clinical_outcomes &lt;- c(\"ZHL\", \"QXYD\", \"VAPPJLJSL\", \"VCL\", \"VSL\", \"MAD\", \"LIN\", \"STR\", \"WOB\", \"BCF\")\n\nimportant_clinical_outcome &lt;- clinical_outcome[, c(\"Individual\", selected_clinical_outcomes)]\n\nIndividual_level_CO_freq &lt;- readRDS(\"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/Individual_level_CO_freq.rds\")\n\nCO_and_clinical_outcome_table &lt;- left_join(Individual_level_CO_freq, important_clinical_outcome, by = \"Individual\") %&gt;% \n  mutate_if(is.numeric, ~replace_na(.,mean(., na.rm = TRUE)))\n\ncolnames(CO_and_clinical_outcome_table)[2] &lt;- \"CO\"\n\ncolnames(CO_and_clinical_outcome_table)[5:ncol(CO_and_clinical_outcome_table)] &lt;- c(\"TV\", \"FM\", \"APS\", \"CS\", \"LV\", \"AAD\", \"LIN\", \"F\", \"WOB\", \"BCF\")\n\nCO_and_clinical_outcome_table$Age &lt;- NA\n\nCO_and_clinical_outcome_table[grepl(\"AS\", CO_and_clinical_outcome_table$Individual), \"Age\"] &lt;- gsub(\"AS\", \"\", CO_and_clinical_outcome_table[grepl(\"AS\", CO_and_clinical_outcome_table$Individual), \"Individual\"])\nCO_and_clinical_outcome_table[grepl(\"NF\", CO_and_clinical_outcome_table$Individual), \"Age\"] &lt;- gsub(\"NF\", \"\", CO_and_clinical_outcome_table[grepl(\"NF\", CO_and_clinical_outcome_table$Individual), \"Individual\"])\nCO_and_clinical_outcome_table$Age &lt;- gsub(\"-\\\\d\",\"\", CO_and_clinical_outcome_table$Age) %&gt;% as.integer()\n\n# CO_and_clinical_outcome_table &lt;- CO_and_clinical_outcome_table[!CO_and_clinical_outcome_table$Individual == \"NF27-3\", ]\n\nsaveRDS(CO_and_clinical_outcome_table, \"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/CO_and_clinical_outcome_table.rds\")\n\n## Plot TV and FM\nCO_and_clinical_outcome_table &lt;- readRDS(\"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/CO_and_clinical_outcome_table.rds\")\n\n\np_TV &lt;- ggplot(data = CO_and_clinical_outcome_table, aes(x = CO, y = TV, color = Type)) +\n  ggpmisc::stat_poly_eq(aes(label = paste(after_stat(eq.label),\n                               after_stat(rr.label), sep = \"*\\\", \\\"*\"))) +\n  stat_poly_line(se = FALSE) +\n  geom_point() + \n  labs(\n       x = \"Individual Level CO Frequency\",\n       y = \"Total Motility\") +\n  scale_color_manual(values=c(\"coral\", \"cornflowerblue\")) + theme_classic2() +\n  theme(legend.position=\"top\",\n        panel.border = element_rect(\n          color = \"black\",\n          size = 1,\n          fill = NA\n          ),\n        text = element_text(size = 12, color = \"black\"),\n        axis.text.x = element_text(size = 12, color = \"black\", face = \"bold\"),  # X-axis text color\n        axis.text.y = element_text(size = 12, color = \"black\", face = \"bold\"),\n        axis.title.x = element_text(size = 12, color = \"black\", face = \"bold\"),\n        axis.title.y = element_text(size = 12, color = \"black\", face = \"bold\")) + \n  xlim(c(0.5,1.75)) +\n  ylim(c(0,100))\n\nggsave(paste0(\"D:/sperm_project/manuscript_09_23_2023/Figures/section_3_CO_distribution_and_frequency_count/CO_and_TV.pdf\"), width = 3.5, height = 4)  \n\np_FM &lt;- ggplot(data = CO_and_clinical_outcome_table, aes(x = CO, y = FM, color = Type)) +\n  ggpmisc::stat_poly_eq(aes(label = paste(after_stat(eq.label),\n                               after_stat(rr.label), sep = \"*\\\", \\\"*\"))) +\n  stat_poly_line(se = FALSE) +\n  geom_point() + \n  labs(\n       x = \"Individual Level CO Frequency\",\n       y = \"FM\") +\n  scale_color_manual(values=c(\"coral\", \"cornflowerblue\")) + theme_classic2() +\n  theme(legend.position=\"top\",\n        panel.border = element_rect(\n          color = \"black\",\n          size = 2,\n          fill = NA\n          ),\n        text = element_text(size = 12, color = \"black\"),\n        axis.text.x = element_text(color = \"black\"),  # X-axis text color\n        axis.text.y = element_text(color = \"black\"))\n\nggsave(paste0(\"D:/sperm_project/sperm_CO_table/CO_and_FM.pdf\"), width = 3.5, height = 4)  \n\n\nggpairs(CO_and_clinical_outcome_table[, c(\"CO\", \"TV\", \"FM\", \"APS\", \"CS\", \"LV\", \"AAD\", \"LIN\", \"F\", \"WOB\", \"BCF\", \"Age\", \"Type\")], aes(color = Type, alpha = 0.5),\n        lower = list(continuous = \"smooth\", size=0.05),\n        upper = list(continuous = wrap(\"cor\", size = 1.5)),) + \n  scale_color_manual(values=c(\"coral\", \"cornflowerblue\")) + \n  scale_fill_manual(values=c(\"coral\", \"cornflowerblue\")) + \n  theme(axis.text = element_text(size = 5),\n        strip.text.x = element_text(size = 5),\n        strip.text.y = element_text(size = 5))\nggsave(paste0(\"D:/sperm_project/sperm_CO_table/CO_and_clinical_outcome_ggpair_selected_correlated_motility_characteristics.pdf\"), width = 8, height = 8)"
  },
  {
    "objectID": "section_7_CO_and_clinical_outcome_association_study.html#multi-variable-regression",
    "href": "section_7_CO_and_clinical_outcome_association_study.html#multi-variable-regression",
    "title": "8  Crossover Frequency and Clinical Characteristics Association Study",
    "section": "8.3 Multi-variable Regression",
    "text": "8.3 Multi-variable Regression\n\n\n\nR script\n\nclinical_outcome_table &lt;- CO_and_clinical_outcome_table %&gt;% dplyr::select(TV, FM, APS, CS, LV, AAD, LIN, F, WOB, BCF, Age, Type)\n\ndata.pca &lt;- princomp(clinical_outcome_table[, - 12])\npca_res &lt;- prcomp(clinical_outcome_table[, - 12], scale. = TRUE)\n\nautoplot(pca_res, data = clinical_outcome_table, colour = 'Type', size = 3)\n\nPC_1_and_2 &lt;- data.pca$loadings[, 1:2]\n\nfviz_pca_var(data.pca, col.var = \"black\")\n\nlm_CO_cli &lt;- lm(CO  ~ ., data = CO_and_clinical_outcome_table %&gt;% dplyr::select(TV, FM, APS, CS, LV, AAD, LIN, F, WOB, BCF, Age, CO))\nsummary(lm_CO_cli)"
  },
  {
    "objectID": "section_8_CO_whole_genome_association_study.html#prepare-the-dataset",
    "href": "section_8_CO_whole_genome_association_study.html#prepare-the-dataset",
    "title": "9  Crossover Frequency and Genome Association Study",
    "section": "9.1 Prepare the dataset",
    "text": "9.1 Prepare the dataset\n\n\n\nR script\n\n## calculate the individual based sperm average CO of each chromosome\neach_sperm_chromosome_level_CO_freq &lt;- readRDS(\"D:/sperm_project/sperm_CO_table/QUAL_RGQ_aneu_NA_removed_CO_and_clinical_assoc/each_sperm_each_chr_CO_table.rds\")\n\nindividual_average_chromosome_level_CO_freq &lt;- each_sperm_chromosome_level_CO_freq %&gt;% group_by(Individual, chr) %&gt;% summarise(ave_CO = mean(chromosome_CO_count), .groups = 'drop')\n\n## Change the long format to wide format\nindividual_average_chromosome_level_CO_freq_wide &lt;- spread(individual_average_chromosome_level_CO_freq, chr, ave_CO)\ncolnames(individual_average_chromosome_level_CO_freq_wide)[-1] &lt;- paste0(\"chr\", colnames(individual_average_chromosome_level_CO_freq_wide)[-1])\n\nindividual_average_chromosome_level_CO_freq_wide$total &lt;- rowSums(individual_average_chromosome_level_CO_freq_wide[, -1], na.rm=FALSE)\n\nindividual_average_chromosome_level_CO_freq_wide &lt;- as.data.frame(individual_average_chromosome_level_CO_freq_wide)\n\n\n## Replace outliers and replace with mean\nreplace_outlier_with_mean &lt;- function(x) {\n  replace(x, x %in% boxplot.stats(x)$out, mean(x))  \n}\n\noutliner_removed_individual_average_chromosome_level_CO_freq_wide &lt;- individual_average_chromosome_level_CO_freq_wide\n\noutliner_removed_individual_average_chromosome_level_CO_freq_wide[, -1] &lt;- lapply(outliner_removed_individual_average_chromosome_level_CO_freq_wide[, -1], replace_outlier_with_mean)\n\nscaled_outliner_removed_individual_average_chromosome_level_CO_freq_wide &lt;- outliner_removed_individual_average_chromosome_level_CO_freq_wide\n\nscaled_outliner_removed_individual_average_chromosome_level_CO_freq_wide[-1] &lt;- scale(scaled_outliner_removed_individual_average_chromosome_level_CO_freq_wide[-1])\n\n## Read the .fam file in to R\nfam_file &lt;- read.table(\"D:/sperm_project/GEMMA/Blood_and_CO/new_input_files_19_09_2023/blood.fam\")\n\n## Extract the blood individual information\nblood_name_fam_file &lt;- fam_file[, c(1:5)]\n\nblood_name_fam_file$V6 &lt;- str_extract(blood_name_fam_file$V1, str_c(c(\"AS\\\\d+\", \"NF\\\\d+-\\\\d\"), collapse = \"|\"))\n\nblood_name_fam_file[blood_name_fam_file$V1 == \"AS32YRBB\", \"V6\"] = \"AS32-1\" \n\nblood_name_fam_file &lt;- left_join(blood_name_fam_file, individual_average_chromosome_level_CO_freq_wide, by = c(\"V6\" = \"Individual\"))\n\n\ninclude_sample_list &lt;- na.omit(blood_name_fam_file)[\"V1\"]\ninclude_sample_list$V2 &lt;- include_sample_list$V1\n\n# Write the data frame to a tab-delimited file\nwrite.table(include_sample_list, file = \"D:/sperm_project/GEMMA/Blood_and_CO/include_sample.txt\", sep = \"\\t\", row.names = FALSE, col.names = FALSE, quote = FALSE)\n\n\nimpute_new_fam_file &lt;- as.data.frame(blood_name_fam_file) %&gt;% mutate_if(is.numeric, ~replace_na(.,mean(., na.rm = TRUE)))\n\nimpute_new_fam_file &lt;- impute_new_fam_file[, -6]"
  },
  {
    "objectID": "section_9_transcriptome.html#raw-count-matrix",
    "href": "section_9_transcriptome.html#raw-count-matrix",
    "title": "10  Sperm Transcriptome Study",
    "section": "10.1 Raw count matrix",
    "text": "10.1 Raw count matrix\n\n\n\nR script\n\n## Sperm Transcriptome Study\n\n\n## Read the clinical characteristics\nclinical_characteristics &lt;- fread(\"D:/sperm_project/sperm_transcriptome/outcomes/important_clinical_characteristics.csv\")\nclinical_characteristics &lt;- na.omit(clinical_characteristics)\n\nclinical_characteristics &lt;- clinical_characteristics[order(clinical_characteristics$Patient),]\n\ninfo_table &lt;- column_to_rownames(clinical_characteristics, var = \"Patient\") %&gt;% \n              dplyr::filter(Group == \"A\" | Group == \"N\") %&gt;%\n              dplyr::mutate(Group = factor(Group, levels = c(\"N\", \"A\")))\n\nfwrite(info_table,\n       \"D:/sperm_project/manuscript_09_23_2023/Tables/section_5_transcriptome/donor_info.csv\", \n       row.names = TRUE)\n\n## Read raw count matrix\nraw_count_matrix &lt;- readRDS(\"D:/sperm_project/sperm_transcriptome/raw_count_matrix/raw_count_matrix.rds\")\n\nraw_count_matrix &lt;- raw_count_matrix %&gt;% dplyr::select(rownames(info_table))\n\nfwrite(raw_count_matrix,\n       \"D:/sperm_project/manuscript_09_23_2023/Tables/section_5_transcriptome/raw_count_matrix.csv\", \n       row.names = TRUE)\n\n\n## Compare the group \n\ndds &lt;- DESeqDataSetFromMatrix(countData = raw_count_matrix,\n                              colData = info_table,\n                              design = ~ Group)\n\n## Filter gene expression\n\nsmallestGroupSize &lt;- 5\nkeep &lt;- rowSums(counts(dds) &gt;= 5) &gt;= smallestGroupSize\ndds &lt;- dds[keep,]\n\n\n## DEG Analysis\n\ndds &lt;- DESeq(dds)\nres &lt;- results(dds)\n\n## Select the Key Genes\n\nlog2FC_cutoff &lt;- 1\nadj.P_value_cutoff &lt;- 0.05\n\n\nDEG_table &lt;- res %&gt;% as.data.frame() %&gt;%\n              tibble::rownames_to_column(var = \"ensembl_gene_id\")\n\nselected_DEG_table &lt;- res %&gt;% as.data.frame() %&gt;%\n#  dplyr::filter(abs(log2FoldChange) &gt;= log2FC_cutoff, padj &lt;= adj.P_value_cutoff) %&gt;%\n  dplyr::add_rownames(var = \"ensembl_gene_id\") %&gt;%\n  dplyr::mutate(ensembl_gene_id = gsub(\"\\\\..*\", \"\", ensembl_gene_id))\n\n## Define the ensembl reference \n\n\n## If human\nensembl_reference &lt;- \"hsapiens_gene_ensembl\"\n\n## Add the annotation of gene expression table\n\nensembl = useMart(\"ensembl\")\n\nesemblist &lt;- as.data.frame(listDatasets(ensembl))\n\nensembl = useDataset(ensembl_reference, mart=ensembl)\n\nfilters = listFilters(ensembl)\n\nattributes = listAttributes(ensembl)\n\nt2g &lt;- getBM(attributes=c('ensembl_gene_id',\n                          \"ensembl_gene_id_version\",\n                          'chromosome_name',\n                          'start_position',\n                          'end_position', \n                          'hgnc_symbol', \n                          'band'), mart = ensembl)\n\nduplicated_ensembl &lt;- t2g[duplicated(t2g$ensembl_gene_id), \"ensembl_gene_id\"]\n\nselected_DEG_table &lt;- selected_DEG_table %&gt;% filter(!ensembl_gene_id %in% duplicated_ensembl)\n\nselected_DEG_table &lt;- left_join(selected_DEG_table, t2g, by= 'ensembl_gene_id')\n\nselected_DEG_table$arm &lt;- str_to_title(substr(selected_DEG_table$band, 1, 1))\n\nselected_DEG_table &lt;- selected_DEG_table %&gt;% filter(chromosome_name %in% as.character(c(1:22, \"X\", \"Y\")))\n\nselected_DEG_table$chromosome_name &lt;- factor(paste0(\"chr\", selected_DEG_table$chromosome_name),\n                                             levels = paste0(\"chr\", c(1:22,\"X\", \"Y\")))\n\nselected_DEG_table$arm_pos &lt;- paste0(selected_DEG_table$chromosome_name, selected_DEG_table$arm)\n\narm_pos_levels &lt;- outer(paste0(\"chr\",c(1:22, \"X\", \"Y\")), c(\"P\", \"Q\"), FUN = \"paste0\")\n\narm_pos_levels &lt;- t(arm_pos_levels) \n\ndim(arm_pos_levels) &lt;- NULL\n\nselected_DEG_table$arm_pos &lt;- factor(selected_DEG_table$arm_pos, \n                                     levels = arm_pos_levels)\n\nfwrite(selected_DEG_table, \"D:/sperm_project/sperm_transcriptome/result_table/DEG_table/DEG_table.csv\")"
  },
  {
    "objectID": "section_9_transcriptome.html#gsea-analysis",
    "href": "section_9_transcriptome.html#gsea-analysis",
    "title": "10  Sperm Transcriptome Study",
    "section": "10.2 GSEA analysis",
    "text": "10.2 GSEA analysis\n\n\n\nR script\n\nlibrary(org.Hs.eg.db)\nlibrary(clusterProfiler)\nlibrary(enrichplot)\n# we use ggplot2 to add x axis labels (ex: ridgeplot)\nlibrary(ggplot2)\n\n\nDEG_table &lt;- fread(\"D:/sperm_project/sperm_transcriptome/result_table/DEG_table/DEG_table.csv\")\n\nDEG_table &lt;- DEG_table[order(-DEG_table$stat),]\n\n\n# we want the log2 fold change \noriginal_gene_list &lt;- DEG_table$log2FoldChange\n\n# name the vector\nnames(original_gene_list) &lt;- DEG_table$ensembl_gene_id\n\n# omit any NA values \ngene_list &lt;- na.omit(original_gene_list)\n\n# sort the list in decreasing order (required for clusterProfiler)\ngene_list = sort(gene_list, decreasing = TRUE)"
  },
  {
    "objectID": "section_9_transcriptome.html#discuss-the-expression-pattern-of-the-co-assoicated-snp-genes",
    "href": "section_9_transcriptome.html#discuss-the-expression-pattern-of-the-co-assoicated-snp-genes",
    "title": "10  Sperm Transcriptome Study",
    "section": "10.3 Discuss the expression pattern of the CO assoicated SNP genes",
    "text": "10.3 Discuss the expression pattern of the CO assoicated SNP genes\n\n\n\nR script\n\nsign_SNP_df &lt;- as.data.frame(fread(\"D:/sperm_project/manuscript_09_23_2023/Tables/section_4_CO_GWAS/CO_significant_annotated_SNP/anno_sign_SNP_df.csv\"))\n\nsign_SNP_gene_list &lt;- unique(sign_SNP_df$Gene)\n\ndeg_table &lt;- as.data.frame(fread(\"D:/sperm_project/sperm_transcriptome/result_table/DEG_table/DEG_table.csv\"))\n\nwhole_gene_list &lt;- deg_table$hgnc_symbol\n\nintersect_gene_list &lt;- intersect(sign_SNP_gene_list, whole_gene_list)\nintersect_gene_list &lt;- intersect_gene_list[intersect_gene_list!=\"\"]\nintersect_gene_list &lt;- c(intersect_gene_list, \"ART5\", \"ERCC6L2\", \"NAV2\", \"ZRANB3\")\n  \nintersect_gene_ensemble_list &lt;- deg_table[deg_table$hgnc_symbol %in% intersect_gene_list, ] %&gt;% dplyr::filter(abs(log2FoldChange) &gt; 0.5)%&gt;% dplyr::select(\"hgnc_symbol\", \"ensembl_gene_id_version\")\n\n\nintersect_gene_ensemble_list$ensembl_gene_id_version &lt;- gsub(\"[.]\\\\d+\", \"\", intersect_gene_ensemble_list$ensembl_gene_id_version)\n\n# Read the raw count matrix\n\ngene_raw_count_matrix &lt;- as.data.frame(fread(\"D:/sperm_project/sperm_transcriptome/raw_count_matrix/raw_count_matrix.csv\"))\n\nrownames(gene_raw_count_matrix) &lt;- gene_raw_count_matrix[, 1]\n\ngene_raw_count_matrix &lt;- gene_raw_count_matrix[, -1]  \n\nrownames(gene_raw_count_matrix) &lt;- gsub(\"[.]\\\\d+\", \"\", rownames(gene_raw_count_matrix))\n# Define group info\n\ngroup &lt;- c(rep(\"AS\", 7), rep(\"NF\", 6))\nnames(group) &lt;- c(\"SCYL\", \"SLZG\", \"AWGQ\", \"AWL\", \"YMLA\", \"ALGT\", \"NZYL\", \"ALQC\", \"LCKA\", \"LZHA\", \"NDYH\", \"NYXH\", \"ALDJ\")\n\ngene_raw_count_matrix &lt;- gene_raw_count_matrix[, names(group)]\n# Create DEGList object\n\nDEGL &lt;- DGEList(counts=gene_raw_count_matrix, group=group[colnames(gene_raw_count_matrix)])\n\n# Calculate the cpm\n\ncpm &lt;- cpm(DEGL, log = FALSE, normalized.lib.sizes=TRUE)\n\nfwrite(data.frame(cpm), \"D:/sperm_project/manuscript_09_23_2023/Tables/section_5_transcriptome/cpm_matrix.csv\", row.names = TRUE)\n\n# Extract the genes\n\ncpm_target_genes &lt;- cpm[intersect_gene_ensemble_list$ensembl_gene_id_version, ]\nrownames(cpm_target_genes) &lt;- intersect_gene_ensemble_list$hgnc_symbol\nt_cpm_target_genes &lt;- t(cpm_target_genes)\n\nt_cpm_target_genes &lt;- t_cpm_target_genes %&gt;% as.data.frame() %&gt;% dplyr::filter() %&gt;% tibble::rownames_to_column(var = \"sample\")\n\nt_cpm_target_genes$Type &lt;- group[t_cpm_target_genes$sample]\n\n# Melt the data frame from wide to long format\n\nmelted_t_cpm_target_genes &lt;- melt(t_cpm_target_genes, id.vars = c(\"sample\", \"Type\"), variable.name = \"Gene\", value.name = \"Expression\")\n\n# Create a boxplot with facets\nggplot(melted_t_cpm_target_genes, aes(x = Type, y = Expression, color = Type)) +\n  geom_violin(lwd=0.8) +\n  geom_boxplot(width=0.1) +\n  facet_wrap(~ Gene, scales = \"free\", nrow = 3) +\n  labs(\n    x = \"\",\n    y = \"CPM\"\n  ) + \n  scale_color_manual(values=c(\"coral\", \"cornflowerblue\"))  +\n  theme_classic()+\n  theme(strip.text.x = element_text(\n        size = 10, color = \"black\", face = \"bold\"\n        ),\n        legend.position=\"NULL\",\n        panel.border = element_rect(\n          color = \"black\",\n          size = 0.8,\n          fill = NA\n          ),\n        text = element_text(size = 10, color = \"black\"),\n        axis.text.x = element_text(color = \"black\", size = 10, face = \"bold\"),  # X-axis text color\n        axis.text.y = element_text(color = \"black\", size = 10, face = \"bold\"),\n        axis.title.y = element_text(color = \"black\", size = 10, face = \"bold\")\n        ) + stat_compare_means(label = \"p.format\")\n\nggsave(paste0(\"D:/sperm_project/manuscript_09_23_2023/Figures/section_5_CO_GWAS/gene_expression_boxplot.pdf\"), width = 7.8, height = 4.8)"
  },
  {
    "objectID": "section_6_compare_CO.html",
    "href": "section_6_compare_CO.html",
    "title": "7  Compare CO",
    "section": "",
    "text": "7.0.1 Check the hotspot density\nR script\n\nlibrary(biomaRt)\nlibrary(tidyverse)\ntxdb &lt;- TxDb.Hsapiens.UCSC.hg38.knownGene\n\n# Combine the AS density and NF density \nAS_NF_CO_density &lt;- left_join(AS_CO_density, NF_CO_density)\n\nAS_NF_CO_density &lt;- AS_NF_CO_density %&gt;% dplyr::select(seqnames, start, end, AS_CO_density, NF_CO_density)\n\nfwrite(AS_NF_CO_density, \"D:/sperm_project/manuscript_09_23_2023/Tables/section_3_crossover/AS_NF_Co_density.csv\")\n\nwrite.table(AS_NF_CO_density[, c(1:3)], \"D:/sperm_project/manuscript_09_23_2023/Tables/section_3_crossover/AS_NF_Co_density_windows_info.bed\", sep = \"\\t\", col.names = FALSE, quote = FALSE, row.names = FALSE)\n\n# Extract the high CO region\n\nhigh_CO_density &lt;- AS_NF_CO_density %&gt;% dplyr::filter(AS_CO_density &gt;= 2, NF_CO_density &gt;= 2)\n\ncolnames(high_CO_density)[1] &lt;- \"chr\"\n\nhigh_CO_density$chr &lt;- gsub(\"chr\", \"\", high_CO_density$chr)\n\n# specify the database\nensembl = useMart(\"ensembl\", dataset = \"hsapiens_gene_ensembl\")\n\n# queries per row\nres &lt;- high_CO_density %&gt;% \n  split(1:nrow(.)) %&gt;% \n  map(~getBM(attributes=c(\"external_gene_name\", \"chromosome_name\", \"start_position\", \"end_position\"), \n             filters = c(\"chromosome_name\" , \"start\", \"end\"), \n             values = list(.$chr, .$start, .$end), \n             mart = ensembl))\n# Function to merge a specific column, ignoring empty values\nmerge_column_ignore_empty &lt;- function(df, column_name) {\n    merged_vector &lt;- paste(df[[column_name]][df[[column_name]] != \"\"], collapse = \",\")\n    return(merged_vector)\n}\n\n# Apply the function to all data frames in the list\nmerged_vectors_list &lt;- lapply(res, merge_column_ignore_empty, column_name = \"external_gene_name\")\n\n# Bind the merged vectors as a single column\nresulting_dataframe &lt;- do.call(rbind, merged_vectors_list)\n\ncolnames(resulting_dataframe) &lt;- \"genes\"\n\nhigh_CO_density &lt;- cbind(high_CO_density, resulting_dataframe)\n\n# Output the high CO density bed file \n\nwrite.table(high_CO_density[, c(1:3)], \n            \"D:/sperm_project/manuscript_09_23_2023/Tables/section_3_crossover/high_crossover_density.bed\", \n            sep = \"\\t\", col.names = FALSE, quote = FALSE, row.names = FALSE)\n\ngenes_in_the_windows &lt;- as.vector(high_CO_density$genes)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Compare CO</span>"
    ]
  }
]